# Generated from WdlV1Parser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        112,
        814,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        2,
        65,
        7,
        65,
        2,
        66,
        7,
        66,
        2,
        67,
        7,
        67,
        2,
        68,
        7,
        68,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        151,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        164,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        170,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        1,
        7,
        3,
        7,
        182,
        8,
        7,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        193,
        8,
        9,
        1,
        10,
        1,
        10,
        1,
        11,
        5,
        11,
        198,
        8,
        11,
        10,
        11,
        12,
        11,
        201,
        9,
        11,
        1,
        12,
        1,
        12,
        5,
        12,
        205,
        8,
        12,
        10,
        12,
        12,
        12,
        208,
        9,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        5,
        14,
        219,
        8,
        14,
        10,
        14,
        12,
        14,
        222,
        9,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        5,
        14,
        229,
        8,
        14,
        10,
        14,
        12,
        14,
        232,
        9,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        236,
        8,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        3,
        15,
        242,
        8,
        15,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        5,
        18,
        254,
        8,
        18,
        10,
        18,
        12,
        18,
        257,
        9,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        265,
        8,
        19,
        10,
        19,
        12,
        19,
        268,
        9,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        5,
        20,
        291,
        8,
        20,
        10,
        20,
        12,
        20,
        294,
        9,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        5,
        21,
        305,
        8,
        21,
        10,
        21,
        12,
        21,
        308,
        9,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        5,
        22,
        322,
        8,
        22,
        10,
        22,
        12,
        22,
        325,
        9,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        332,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        5,
        26,
        344,
        8,
        26,
        10,
        26,
        12,
        26,
        347,
        9,
        26,
        1,
        26,
        3,
        26,
        350,
        8,
        26,
        3,
        26,
        352,
        8,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        5,
        26,
        370,
        8,
        26,
        10,
        26,
        12,
        26,
        373,
        9,
        26,
        1,
        26,
        3,
        26,
        376,
        8,
        26,
        5,
        26,
        378,
        8,
        26,
        10,
        26,
        12,
        26,
        381,
        9,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        5,
        26,
        399,
        8,
        26,
        10,
        26,
        12,
        26,
        402,
        9,
        26,
        1,
        26,
        3,
        26,
        405,
        8,
        26,
        5,
        26,
        407,
        8,
        26,
        10,
        26,
        12,
        26,
        410,
        9,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        5,
        26,
        423,
        8,
        26,
        10,
        26,
        12,
        26,
        426,
        9,
        26,
        1,
        26,
        3,
        26,
        429,
        8,
        26,
        5,
        26,
        431,
        8,
        26,
        10,
        26,
        12,
        26,
        434,
        9,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        3,
        26,
        439,
        8,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        5,
        26,
        449,
        8,
        26,
        10,
        26,
        12,
        26,
        452,
        9,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        468,
        8,
        30,
        1,
        30,
        5,
        30,
        471,
        8,
        30,
        10,
        30,
        12,
        30,
        474,
        9,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        5,
        31,
        480,
        8,
        31,
        10,
        31,
        12,
        31,
        483,
        9,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        3,
        32,
        494,
        8,
        32,
        1,
        33,
        1,
        33,
        1,
        34,
        5,
        34,
        499,
        8,
        34,
        10,
        34,
        12,
        34,
        502,
        9,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        512,
        8,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        5,
        36,
        519,
        8,
        36,
        10,
        36,
        12,
        36,
        522,
        9,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        526,
        8,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        5,
        37,
        533,
        8,
        37,
        10,
        37,
        12,
        37,
        536,
        9,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        540,
        8,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        5,
        40,
        553,
        8,
        40,
        10,
        40,
        12,
        40,
        556,
        9,
        40,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        5,
        41,
        563,
        8,
        41,
        10,
        41,
        12,
        41,
        566,
        9,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        5,
        43,
        577,
        8,
        43,
        10,
        43,
        12,
        43,
        580,
        9,
        43,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        5,
        44,
        587,
        8,
        44,
        10,
        44,
        12,
        44,
        590,
        9,
        44,
        1,
        44,
        1,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        5,
        45,
        597,
        8,
        45,
        10,
        45,
        12,
        45,
        600,
        9,
        45,
        1,
        45,
        1,
        45,
        1,
        46,
        5,
        46,
        605,
        8,
        46,
        10,
        46,
        12,
        46,
        608,
        9,
        46,
        1,
        47,
        1,
        47,
        5,
        47,
        612,
        8,
        47,
        10,
        47,
        12,
        47,
        615,
        9,
        47,
        1,
        47,
        1,
        47,
        1,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        5,
        49,
        627,
        8,
        49,
        10,
        49,
        12,
        49,
        630,
        9,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        1,
        49,
        5,
        49,
        638,
        8,
        49,
        10,
        49,
        12,
        49,
        641,
        9,
        49,
        1,
        49,
        1,
        49,
        3,
        49,
        645,
        8,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        654,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        4,
        51,
        660,
        8,
        51,
        11,
        51,
        12,
        51,
        661,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        670,
        8,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        5,
        55,
        684,
        8,
        55,
        10,
        55,
        12,
        55,
        687,
        9,
        55,
        1,
        55,
        3,
        55,
        690,
        8,
        55,
        5,
        55,
        692,
        8,
        55,
        10,
        55,
        12,
        55,
        695,
        9,
        55,
        1,
        56,
        1,
        56,
        3,
        56,
        699,
        8,
        56,
        1,
        56,
        1,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        706,
        8,
        57,
        10,
        57,
        12,
        57,
        709,
        9,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        714,
        8,
        58,
        1,
        58,
        3,
        58,
        717,
        8,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        5,
        59,
        727,
        8,
        59,
        10,
        59,
        12,
        59,
        730,
        9,
        59,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        1,
        60,
        5,
        60,
        740,
        8,
        60,
        10,
        60,
        12,
        60,
        743,
        9,
        60,
        1,
        60,
        1,
        60,
        1,
        61,
        1,
        61,
        1,
        61,
        5,
        61,
        750,
        8,
        61,
        10,
        61,
        12,
        61,
        753,
        9,
        61,
        1,
        61,
        1,
        61,
        1,
        62,
        1,
        62,
        1,
        62,
        5,
        62,
        760,
        8,
        62,
        10,
        62,
        12,
        62,
        763,
        9,
        62,
        1,
        62,
        1,
        62,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        1,
        63,
        3,
        63,
        772,
        8,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        1,
        64,
        5,
        64,
        778,
        8,
        64,
        10,
        64,
        12,
        64,
        781,
        9,
        64,
        1,
        64,
        1,
        64,
        1,
        65,
        1,
        65,
        1,
        65,
        3,
        65,
        788,
        8,
        65,
        1,
        66,
        1,
        66,
        5,
        66,
        792,
        8,
        66,
        10,
        66,
        12,
        66,
        795,
        9,
        66,
        1,
        66,
        1,
        66,
        5,
        66,
        799,
        8,
        66,
        10,
        66,
        12,
        66,
        802,
        9,
        66,
        3,
        66,
        804,
        8,
        66,
        1,
        66,
        1,
        66,
        1,
        67,
        1,
        67,
        1,
        67,
        1,
        68,
        1,
        68,
        1,
        68,
        1,
        68,
        0,
        6,
        36,
        38,
        40,
        42,
        44,
        52,
        69,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        0,
        7,
        3,
        0,
        21,
        25,
        29,
        29,
        68,
        68,
        1,
        0,
        33,
        34,
        1,
        0,
        69,
        70,
        1,
        0,
        55,
        56,
        1,
        0,
        98,
        99,
        2,
        0,
        101,
        101,
        103,
        103,
        2,
        0,
        108,
        108,
        110,
        110,
        853,
        0,
        138,
        1,
        0,
        0,
        0,
        2,
        145,
        1,
        0,
        0,
        0,
        4,
        152,
        1,
        0,
        0,
        0,
        6,
        163,
        1,
        0,
        0,
        0,
        8,
        169,
        1,
        0,
        0,
        0,
        10,
        171,
        1,
        0,
        0,
        0,
        12,
        174,
        1,
        0,
        0,
        0,
        14,
        181,
        1,
        0,
        0,
        0,
        16,
        183,
        1,
        0,
        0,
        0,
        18,
        192,
        1,
        0,
        0,
        0,
        20,
        194,
        1,
        0,
        0,
        0,
        22,
        199,
        1,
        0,
        0,
        0,
        24,
        202,
        1,
        0,
        0,
        0,
        26,
        212,
        1,
        0,
        0,
        0,
        28,
        235,
        1,
        0,
        0,
        0,
        30,
        241,
        1,
        0,
        0,
        0,
        32,
        243,
        1,
        0,
        0,
        0,
        34,
        245,
        1,
        0,
        0,
        0,
        36,
        247,
        1,
        0,
        0,
        0,
        38,
        258,
        1,
        0,
        0,
        0,
        40,
        269,
        1,
        0,
        0,
        0,
        42,
        295,
        1,
        0,
        0,
        0,
        44,
        309,
        1,
        0,
        0,
        0,
        46,
        331,
        1,
        0,
        0,
        0,
        48,
        333,
        1,
        0,
        0,
        0,
        50,
        335,
        1,
        0,
        0,
        0,
        52,
        438,
        1,
        0,
        0,
        0,
        54,
        453,
        1,
        0,
        0,
        0,
        56,
        456,
        1,
        0,
        0,
        0,
        58,
        461,
        1,
        0,
        0,
        0,
        60,
        464,
        1,
        0,
        0,
        0,
        62,
        475,
        1,
        0,
        0,
        0,
        64,
        493,
        1,
        0,
        0,
        0,
        66,
        495,
        1,
        0,
        0,
        0,
        68,
        500,
        1,
        0,
        0,
        0,
        70,
        511,
        1,
        0,
        0,
        0,
        72,
        525,
        1,
        0,
        0,
        0,
        74,
        539,
        1,
        0,
        0,
        0,
        76,
        541,
        1,
        0,
        0,
        0,
        78,
        545,
        1,
        0,
        0,
        0,
        80,
        549,
        1,
        0,
        0,
        0,
        82,
        559,
        1,
        0,
        0,
        0,
        84,
        569,
        1,
        0,
        0,
        0,
        86,
        573,
        1,
        0,
        0,
        0,
        88,
        583,
        1,
        0,
        0,
        0,
        90,
        593,
        1,
        0,
        0,
        0,
        92,
        606,
        1,
        0,
        0,
        0,
        94,
        609,
        1,
        0,
        0,
        0,
        96,
        619,
        1,
        0,
        0,
        0,
        98,
        644,
        1,
        0,
        0,
        0,
        100,
        653,
        1,
        0,
        0,
        0,
        102,
        655,
        1,
        0,
        0,
        0,
        104,
        669,
        1,
        0,
        0,
        0,
        106,
        671,
        1,
        0,
        0,
        0,
        108,
        674,
        1,
        0,
        0,
        0,
        110,
        678,
        1,
        0,
        0,
        0,
        112,
        696,
        1,
        0,
        0,
        0,
        114,
        702,
        1,
        0,
        0,
        0,
        116,
        710,
        1,
        0,
        0,
        0,
        118,
        718,
        1,
        0,
        0,
        0,
        120,
        733,
        1,
        0,
        0,
        0,
        122,
        746,
        1,
        0,
        0,
        0,
        124,
        756,
        1,
        0,
        0,
        0,
        126,
        771,
        1,
        0,
        0,
        0,
        128,
        773,
        1,
        0,
        0,
        0,
        130,
        787,
        1,
        0,
        0,
        0,
        132,
        789,
        1,
        0,
        0,
        0,
        134,
        807,
        1,
        0,
        0,
        0,
        136,
        810,
        1,
        0,
        0,
        0,
        138,
        139,
        5,
        27,
        0,
        0,
        139,
        140,
        5,
        40,
        0,
        0,
        140,
        141,
        3,
        8,
        4,
        0,
        141,
        142,
        5,
        58,
        0,
        0,
        142,
        143,
        3,
        8,
        4,
        0,
        143,
        144,
        5,
        41,
        0,
        0,
        144,
        1,
        1,
        0,
        0,
        0,
        145,
        146,
        5,
        26,
        0,
        0,
        146,
        147,
        5,
        40,
        0,
        0,
        147,
        148,
        3,
        8,
        4,
        0,
        148,
        150,
        5,
        41,
        0,
        0,
        149,
        151,
        5,
        55,
        0,
        0,
        150,
        149,
        1,
        0,
        0,
        0,
        150,
        151,
        1,
        0,
        0,
        0,
        151,
        3,
        1,
        0,
        0,
        0,
        152,
        153,
        5,
        28,
        0,
        0,
        153,
        154,
        5,
        40,
        0,
        0,
        154,
        155,
        3,
        8,
        4,
        0,
        155,
        156,
        5,
        58,
        0,
        0,
        156,
        157,
        3,
        8,
        4,
        0,
        157,
        158,
        5,
        41,
        0,
        0,
        158,
        5,
        1,
        0,
        0,
        0,
        159,
        164,
        3,
        2,
        1,
        0,
        160,
        164,
        3,
        0,
        0,
        0,
        161,
        164,
        3,
        4,
        2,
        0,
        162,
        164,
        7,
        0,
        0,
        0,
        163,
        159,
        1,
        0,
        0,
        0,
        163,
        160,
        1,
        0,
        0,
        0,
        163,
        161,
        1,
        0,
        0,
        0,
        163,
        162,
        1,
        0,
        0,
        0,
        164,
        7,
        1,
        0,
        0,
        0,
        165,
        166,
        3,
        6,
        3,
        0,
        166,
        167,
        5,
        53,
        0,
        0,
        167,
        170,
        1,
        0,
        0,
        0,
        168,
        170,
        3,
        6,
        3,
        0,
        169,
        165,
        1,
        0,
        0,
        0,
        169,
        168,
        1,
        0,
        0,
        0,
        170,
        9,
        1,
        0,
        0,
        0,
        171,
        172,
        3,
        8,
        4,
        0,
        172,
        173,
        5,
        68,
        0,
        0,
        173,
        11,
        1,
        0,
        0,
        0,
        174,
        175,
        3,
        8,
        4,
        0,
        175,
        176,
        5,
        68,
        0,
        0,
        176,
        177,
        5,
        50,
        0,
        0,
        177,
        178,
        3,
        32,
        16,
        0,
        178,
        13,
        1,
        0,
        0,
        0,
        179,
        182,
        3,
        10,
        5,
        0,
        180,
        182,
        3,
        12,
        6,
        0,
        181,
        179,
        1,
        0,
        0,
        0,
        181,
        180,
        1,
        0,
        0,
        0,
        182,
        15,
        1,
        0,
        0,
        0,
        183,
        184,
        7,
        1,
        0,
        0,
        184,
        17,
        1,
        0,
        0,
        0,
        185,
        186,
        5,
        35,
        0,
        0,
        186,
        187,
        5,
        50,
        0,
        0,
        187,
        193,
        3,
        28,
        14,
        0,
        188,
        189,
        5,
        31,
        0,
        0,
        189,
        193,
        3,
        28,
        14,
        0,
        190,
        191,
        5,
        32,
        0,
        0,
        191,
        193,
        3,
        32,
        16,
        0,
        192,
        185,
        1,
        0,
        0,
        0,
        192,
        188,
        1,
        0,
        0,
        0,
        192,
        190,
        1,
        0,
        0,
        0,
        193,
        19,
        1,
        0,
        0,
        0,
        194,
        195,
        7,
        2,
        0,
        0,
        195,
        21,
        1,
        0,
        0,
        0,
        196,
        198,
        3,
        20,
        10,
        0,
        197,
        196,
        1,
        0,
        0,
        0,
        198,
        201,
        1,
        0,
        0,
        0,
        199,
        197,
        1,
        0,
        0,
        0,
        199,
        200,
        1,
        0,
        0,
        0,
        200,
        23,
        1,
        0,
        0,
        0,
        201,
        199,
        1,
        0,
        0,
        0,
        202,
        206,
        5,
        74,
        0,
        0,
        203,
        205,
        3,
        18,
        9,
        0,
        204,
        203,
        1,
        0,
        0,
        0,
        205,
        208,
        1,
        0,
        0,
        0,
        206,
        204,
        1,
        0,
        0,
        0,
        206,
        207,
        1,
        0,
        0,
        0,
        207,
        209,
        1,
        0,
        0,
        0,
        208,
        206,
        1,
        0,
        0,
        0,
        209,
        210,
        3,
        32,
        16,
        0,
        210,
        211,
        5,
        39,
        0,
        0,
        211,
        25,
        1,
        0,
        0,
        0,
        212,
        213,
        3,
        24,
        12,
        0,
        213,
        214,
        3,
        22,
        11,
        0,
        214,
        27,
        1,
        0,
        0,
        0,
        215,
        216,
        5,
        66,
        0,
        0,
        216,
        220,
        3,
        22,
        11,
        0,
        217,
        219,
        3,
        26,
        13,
        0,
        218,
        217,
        1,
        0,
        0,
        0,
        219,
        222,
        1,
        0,
        0,
        0,
        220,
        218,
        1,
        0,
        0,
        0,
        220,
        221,
        1,
        0,
        0,
        0,
        221,
        223,
        1,
        0,
        0,
        0,
        222,
        220,
        1,
        0,
        0,
        0,
        223,
        224,
        5,
        66,
        0,
        0,
        224,
        236,
        1,
        0,
        0,
        0,
        225,
        226,
        5,
        65,
        0,
        0,
        226,
        230,
        3,
        22,
        11,
        0,
        227,
        229,
        3,
        26,
        13,
        0,
        228,
        227,
        1,
        0,
        0,
        0,
        229,
        232,
        1,
        0,
        0,
        0,
        230,
        228,
        1,
        0,
        0,
        0,
        230,
        231,
        1,
        0,
        0,
        0,
        231,
        233,
        1,
        0,
        0,
        0,
        232,
        230,
        1,
        0,
        0,
        0,
        233,
        234,
        5,
        65,
        0,
        0,
        234,
        236,
        1,
        0,
        0,
        0,
        235,
        215,
        1,
        0,
        0,
        0,
        235,
        225,
        1,
        0,
        0,
        0,
        236,
        29,
        1,
        0,
        0,
        0,
        237,
        242,
        5,
        35,
        0,
        0,
        238,
        242,
        3,
        16,
        8,
        0,
        239,
        242,
        3,
        28,
        14,
        0,
        240,
        242,
        5,
        68,
        0,
        0,
        241,
        237,
        1,
        0,
        0,
        0,
        241,
        238,
        1,
        0,
        0,
        0,
        241,
        239,
        1,
        0,
        0,
        0,
        241,
        240,
        1,
        0,
        0,
        0,
        242,
        31,
        1,
        0,
        0,
        0,
        243,
        244,
        3,
        34,
        17,
        0,
        244,
        33,
        1,
        0,
        0,
        0,
        245,
        246,
        3,
        36,
        18,
        0,
        246,
        35,
        1,
        0,
        0,
        0,
        247,
        248,
        6,
        18,
        -1,
        0,
        248,
        249,
        3,
        38,
        19,
        0,
        249,
        255,
        1,
        0,
        0,
        0,
        250,
        251,
        10,
        2,
        0,
        0,
        251,
        252,
        5,
        52,
        0,
        0,
        252,
        254,
        3,
        38,
        19,
        0,
        253,
        250,
        1,
        0,
        0,
        0,
        254,
        257,
        1,
        0,
        0,
        0,
        255,
        253,
        1,
        0,
        0,
        0,
        255,
        256,
        1,
        0,
        0,
        0,
        256,
        37,
        1,
        0,
        0,
        0,
        257,
        255,
        1,
        0,
        0,
        0,
        258,
        259,
        6,
        19,
        -1,
        0,
        259,
        260,
        3,
        40,
        20,
        0,
        260,
        266,
        1,
        0,
        0,
        0,
        261,
        262,
        10,
        2,
        0,
        0,
        262,
        263,
        5,
        51,
        0,
        0,
        263,
        265,
        3,
        40,
        20,
        0,
        264,
        261,
        1,
        0,
        0,
        0,
        265,
        268,
        1,
        0,
        0,
        0,
        266,
        264,
        1,
        0,
        0,
        0,
        266,
        267,
        1,
        0,
        0,
        0,
        267,
        39,
        1,
        0,
        0,
        0,
        268,
        266,
        1,
        0,
        0,
        0,
        269,
        270,
        6,
        20,
        -1,
        0,
        270,
        271,
        3,
        42,
        21,
        0,
        271,
        292,
        1,
        0,
        0,
        0,
        272,
        273,
        10,
        7,
        0,
        0,
        273,
        274,
        5,
        48,
        0,
        0,
        274,
        291,
        3,
        42,
        21,
        0,
        275,
        276,
        10,
        6,
        0,
        0,
        276,
        277,
        5,
        49,
        0,
        0,
        277,
        291,
        3,
        42,
        21,
        0,
        278,
        279,
        10,
        5,
        0,
        0,
        279,
        280,
        5,
        47,
        0,
        0,
        280,
        291,
        3,
        42,
        21,
        0,
        281,
        282,
        10,
        4,
        0,
        0,
        282,
        283,
        5,
        46,
        0,
        0,
        283,
        291,
        3,
        42,
        21,
        0,
        284,
        285,
        10,
        3,
        0,
        0,
        285,
        286,
        5,
        44,
        0,
        0,
        286,
        291,
        3,
        42,
        21,
        0,
        287,
        288,
        10,
        2,
        0,
        0,
        288,
        289,
        5,
        45,
        0,
        0,
        289,
        291,
        3,
        42,
        21,
        0,
        290,
        272,
        1,
        0,
        0,
        0,
        290,
        275,
        1,
        0,
        0,
        0,
        290,
        278,
        1,
        0,
        0,
        0,
        290,
        281,
        1,
        0,
        0,
        0,
        290,
        284,
        1,
        0,
        0,
        0,
        290,
        287,
        1,
        0,
        0,
        0,
        291,
        294,
        1,
        0,
        0,
        0,
        292,
        290,
        1,
        0,
        0,
        0,
        292,
        293,
        1,
        0,
        0,
        0,
        293,
        41,
        1,
        0,
        0,
        0,
        294,
        292,
        1,
        0,
        0,
        0,
        295,
        296,
        6,
        21,
        -1,
        0,
        296,
        297,
        3,
        44,
        22,
        0,
        297,
        306,
        1,
        0,
        0,
        0,
        298,
        299,
        10,
        3,
        0,
        0,
        299,
        300,
        5,
        55,
        0,
        0,
        300,
        305,
        3,
        44,
        22,
        0,
        301,
        302,
        10,
        2,
        0,
        0,
        302,
        303,
        5,
        56,
        0,
        0,
        303,
        305,
        3,
        44,
        22,
        0,
        304,
        298,
        1,
        0,
        0,
        0,
        304,
        301,
        1,
        0,
        0,
        0,
        305,
        308,
        1,
        0,
        0,
        0,
        306,
        304,
        1,
        0,
        0,
        0,
        306,
        307,
        1,
        0,
        0,
        0,
        307,
        43,
        1,
        0,
        0,
        0,
        308,
        306,
        1,
        0,
        0,
        0,
        309,
        310,
        6,
        22,
        -1,
        0,
        310,
        311,
        3,
        46,
        23,
        0,
        311,
        323,
        1,
        0,
        0,
        0,
        312,
        313,
        10,
        4,
        0,
        0,
        313,
        314,
        5,
        54,
        0,
        0,
        314,
        322,
        3,
        46,
        23,
        0,
        315,
        316,
        10,
        3,
        0,
        0,
        316,
        317,
        5,
        63,
        0,
        0,
        317,
        322,
        3,
        46,
        23,
        0,
        318,
        319,
        10,
        2,
        0,
        0,
        319,
        320,
        5,
        64,
        0,
        0,
        320,
        322,
        3,
        46,
        23,
        0,
        321,
        312,
        1,
        0,
        0,
        0,
        321,
        315,
        1,
        0,
        0,
        0,
        321,
        318,
        1,
        0,
        0,
        0,
        322,
        325,
        1,
        0,
        0,
        0,
        323,
        321,
        1,
        0,
        0,
        0,
        323,
        324,
        1,
        0,
        0,
        0,
        324,
        45,
        1,
        0,
        0,
        0,
        325,
        323,
        1,
        0,
        0,
        0,
        326,
        327,
        5,
        61,
        0,
        0,
        327,
        332,
        3,
        46,
        23,
        0,
        328,
        329,
        7,
        3,
        0,
        0,
        329,
        332,
        3,
        46,
        23,
        0,
        330,
        332,
        3,
        48,
        24,
        0,
        331,
        326,
        1,
        0,
        0,
        0,
        331,
        328,
        1,
        0,
        0,
        0,
        331,
        330,
        1,
        0,
        0,
        0,
        332,
        47,
        1,
        0,
        0,
        0,
        333,
        334,
        3,
        52,
        26,
        0,
        334,
        49,
        1,
        0,
        0,
        0,
        335,
        336,
        5,
        68,
        0,
        0,
        336,
        51,
        1,
        0,
        0,
        0,
        337,
        338,
        6,
        26,
        -1,
        0,
        338,
        339,
        5,
        68,
        0,
        0,
        339,
        351,
        5,
        36,
        0,
        0,
        340,
        345,
        3,
        32,
        16,
        0,
        341,
        342,
        5,
        58,
        0,
        0,
        342,
        344,
        3,
        32,
        16,
        0,
        343,
        341,
        1,
        0,
        0,
        0,
        344,
        347,
        1,
        0,
        0,
        0,
        345,
        343,
        1,
        0,
        0,
        0,
        345,
        346,
        1,
        0,
        0,
        0,
        346,
        349,
        1,
        0,
        0,
        0,
        347,
        345,
        1,
        0,
        0,
        0,
        348,
        350,
        5,
        58,
        0,
        0,
        349,
        348,
        1,
        0,
        0,
        0,
        349,
        350,
        1,
        0,
        0,
        0,
        350,
        352,
        1,
        0,
        0,
        0,
        351,
        340,
        1,
        0,
        0,
        0,
        351,
        352,
        1,
        0,
        0,
        0,
        352,
        353,
        1,
        0,
        0,
        0,
        353,
        439,
        5,
        37,
        0,
        0,
        354,
        355,
        5,
        36,
        0,
        0,
        355,
        356,
        3,
        32,
        16,
        0,
        356,
        357,
        5,
        37,
        0,
        0,
        357,
        439,
        1,
        0,
        0,
        0,
        358,
        359,
        5,
        9,
        0,
        0,
        359,
        360,
        3,
        32,
        16,
        0,
        360,
        361,
        5,
        10,
        0,
        0,
        361,
        362,
        3,
        32,
        16,
        0,
        362,
        363,
        5,
        11,
        0,
        0,
        363,
        364,
        3,
        32,
        16,
        0,
        364,
        439,
        1,
        0,
        0,
        0,
        365,
        379,
        5,
        40,
        0,
        0,
        366,
        371,
        3,
        32,
        16,
        0,
        367,
        368,
        5,
        58,
        0,
        0,
        368,
        370,
        3,
        32,
        16,
        0,
        369,
        367,
        1,
        0,
        0,
        0,
        370,
        373,
        1,
        0,
        0,
        0,
        371,
        369,
        1,
        0,
        0,
        0,
        371,
        372,
        1,
        0,
        0,
        0,
        372,
        375,
        1,
        0,
        0,
        0,
        373,
        371,
        1,
        0,
        0,
        0,
        374,
        376,
        5,
        58,
        0,
        0,
        375,
        374,
        1,
        0,
        0,
        0,
        375,
        376,
        1,
        0,
        0,
        0,
        376,
        378,
        1,
        0,
        0,
        0,
        377,
        366,
        1,
        0,
        0,
        0,
        378,
        381,
        1,
        0,
        0,
        0,
        379,
        377,
        1,
        0,
        0,
        0,
        379,
        380,
        1,
        0,
        0,
        0,
        380,
        382,
        1,
        0,
        0,
        0,
        381,
        379,
        1,
        0,
        0,
        0,
        382,
        439,
        5,
        41,
        0,
        0,
        383,
        384,
        5,
        36,
        0,
        0,
        384,
        385,
        3,
        32,
        16,
        0,
        385,
        386,
        5,
        58,
        0,
        0,
        386,
        387,
        3,
        32,
        16,
        0,
        387,
        388,
        5,
        37,
        0,
        0,
        388,
        439,
        1,
        0,
        0,
        0,
        389,
        408,
        5,
        38,
        0,
        0,
        390,
        391,
        3,
        32,
        16,
        0,
        391,
        392,
        5,
        43,
        0,
        0,
        392,
        400,
        3,
        32,
        16,
        0,
        393,
        394,
        5,
        58,
        0,
        0,
        394,
        395,
        3,
        32,
        16,
        0,
        395,
        396,
        5,
        43,
        0,
        0,
        396,
        397,
        3,
        32,
        16,
        0,
        397,
        399,
        1,
        0,
        0,
        0,
        398,
        393,
        1,
        0,
        0,
        0,
        399,
        402,
        1,
        0,
        0,
        0,
        400,
        398,
        1,
        0,
        0,
        0,
        400,
        401,
        1,
        0,
        0,
        0,
        401,
        404,
        1,
        0,
        0,
        0,
        402,
        400,
        1,
        0,
        0,
        0,
        403,
        405,
        5,
        58,
        0,
        0,
        404,
        403,
        1,
        0,
        0,
        0,
        404,
        405,
        1,
        0,
        0,
        0,
        405,
        407,
        1,
        0,
        0,
        0,
        406,
        390,
        1,
        0,
        0,
        0,
        407,
        410,
        1,
        0,
        0,
        0,
        408,
        406,
        1,
        0,
        0,
        0,
        408,
        409,
        1,
        0,
        0,
        0,
        409,
        411,
        1,
        0,
        0,
        0,
        410,
        408,
        1,
        0,
        0,
        0,
        411,
        439,
        5,
        39,
        0,
        0,
        412,
        413,
        5,
        30,
        0,
        0,
        413,
        432,
        5,
        38,
        0,
        0,
        414,
        415,
        3,
        50,
        25,
        0,
        415,
        416,
        5,
        43,
        0,
        0,
        416,
        424,
        3,
        32,
        16,
        0,
        417,
        418,
        5,
        58,
        0,
        0,
        418,
        419,
        3,
        50,
        25,
        0,
        419,
        420,
        5,
        43,
        0,
        0,
        420,
        421,
        3,
        32,
        16,
        0,
        421,
        423,
        1,
        0,
        0,
        0,
        422,
        417,
        1,
        0,
        0,
        0,
        423,
        426,
        1,
        0,
        0,
        0,
        424,
        422,
        1,
        0,
        0,
        0,
        424,
        425,
        1,
        0,
        0,
        0,
        425,
        428,
        1,
        0,
        0,
        0,
        426,
        424,
        1,
        0,
        0,
        0,
        427,
        429,
        5,
        58,
        0,
        0,
        428,
        427,
        1,
        0,
        0,
        0,
        428,
        429,
        1,
        0,
        0,
        0,
        429,
        431,
        1,
        0,
        0,
        0,
        430,
        414,
        1,
        0,
        0,
        0,
        431,
        434,
        1,
        0,
        0,
        0,
        432,
        430,
        1,
        0,
        0,
        0,
        432,
        433,
        1,
        0,
        0,
        0,
        433,
        435,
        1,
        0,
        0,
        0,
        434,
        432,
        1,
        0,
        0,
        0,
        435,
        439,
        5,
        39,
        0,
        0,
        436,
        439,
        3,
        30,
        15,
        0,
        437,
        439,
        5,
        68,
        0,
        0,
        438,
        337,
        1,
        0,
        0,
        0,
        438,
        354,
        1,
        0,
        0,
        0,
        438,
        358,
        1,
        0,
        0,
        0,
        438,
        365,
        1,
        0,
        0,
        0,
        438,
        383,
        1,
        0,
        0,
        0,
        438,
        389,
        1,
        0,
        0,
        0,
        438,
        412,
        1,
        0,
        0,
        0,
        438,
        436,
        1,
        0,
        0,
        0,
        438,
        437,
        1,
        0,
        0,
        0,
        439,
        450,
        1,
        0,
        0,
        0,
        440,
        441,
        10,
        10,
        0,
        0,
        441,
        442,
        5,
        40,
        0,
        0,
        442,
        443,
        3,
        32,
        16,
        0,
        443,
        444,
        5,
        41,
        0,
        0,
        444,
        449,
        1,
        0,
        0,
        0,
        445,
        446,
        10,
        9,
        0,
        0,
        446,
        447,
        5,
        60,
        0,
        0,
        447,
        449,
        5,
        68,
        0,
        0,
        448,
        440,
        1,
        0,
        0,
        0,
        448,
        445,
        1,
        0,
        0,
        0,
        449,
        452,
        1,
        0,
        0,
        0,
        450,
        448,
        1,
        0,
        0,
        0,
        450,
        451,
        1,
        0,
        0,
        0,
        451,
        53,
        1,
        0,
        0,
        0,
        452,
        450,
        1,
        0,
        0,
        0,
        453,
        454,
        5,
        2,
        0,
        0,
        454,
        455,
        5,
        78,
        0,
        0,
        455,
        55,
        1,
        0,
        0,
        0,
        456,
        457,
        5,
        12,
        0,
        0,
        457,
        458,
        5,
        68,
        0,
        0,
        458,
        459,
        5,
        13,
        0,
        0,
        459,
        460,
        5,
        68,
        0,
        0,
        460,
        57,
        1,
        0,
        0,
        0,
        461,
        462,
        5,
        13,
        0,
        0,
        462,
        463,
        5,
        68,
        0,
        0,
        463,
        59,
        1,
        0,
        0,
        0,
        464,
        465,
        5,
        3,
        0,
        0,
        465,
        467,
        3,
        28,
        14,
        0,
        466,
        468,
        3,
        58,
        29,
        0,
        467,
        466,
        1,
        0,
        0,
        0,
        467,
        468,
        1,
        0,
        0,
        0,
        468,
        472,
        1,
        0,
        0,
        0,
        469,
        471,
        3,
        56,
        28,
        0,
        470,
        469,
        1,
        0,
        0,
        0,
        471,
        474,
        1,
        0,
        0,
        0,
        472,
        470,
        1,
        0,
        0,
        0,
        472,
        473,
        1,
        0,
        0,
        0,
        473,
        61,
        1,
        0,
        0,
        0,
        474,
        472,
        1,
        0,
        0,
        0,
        475,
        476,
        5,
        6,
        0,
        0,
        476,
        477,
        5,
        68,
        0,
        0,
        477,
        481,
        5,
        38,
        0,
        0,
        478,
        480,
        3,
        10,
        5,
        0,
        479,
        478,
        1,
        0,
        0,
        0,
        480,
        483,
        1,
        0,
        0,
        0,
        481,
        479,
        1,
        0,
        0,
        0,
        481,
        482,
        1,
        0,
        0,
        0,
        482,
        484,
        1,
        0,
        0,
        0,
        483,
        481,
        1,
        0,
        0,
        0,
        484,
        485,
        5,
        39,
        0,
        0,
        485,
        63,
        1,
        0,
        0,
        0,
        486,
        494,
        5,
        90,
        0,
        0,
        487,
        494,
        5,
        87,
        0,
        0,
        488,
        494,
        5,
        88,
        0,
        0,
        489,
        494,
        5,
        89,
        0,
        0,
        490,
        494,
        3,
        70,
        35,
        0,
        491,
        494,
        3,
        74,
        37,
        0,
        492,
        494,
        3,
        72,
        36,
        0,
        493,
        486,
        1,
        0,
        0,
        0,
        493,
        487,
        1,
        0,
        0,
        0,
        493,
        488,
        1,
        0,
        0,
        0,
        493,
        489,
        1,
        0,
        0,
        0,
        493,
        490,
        1,
        0,
        0,
        0,
        493,
        491,
        1,
        0,
        0,
        0,
        493,
        492,
        1,
        0,
        0,
        0,
        494,
        65,
        1,
        0,
        0,
        0,
        495,
        496,
        7,
        4,
        0,
        0,
        496,
        67,
        1,
        0,
        0,
        0,
        497,
        499,
        3,
        66,
        33,
        0,
        498,
        497,
        1,
        0,
        0,
        0,
        499,
        502,
        1,
        0,
        0,
        0,
        500,
        498,
        1,
        0,
        0,
        0,
        500,
        501,
        1,
        0,
        0,
        0,
        501,
        69,
        1,
        0,
        0,
        0,
        502,
        500,
        1,
        0,
        0,
        0,
        503,
        504,
        5,
        92,
        0,
        0,
        504,
        505,
        3,
        68,
        34,
        0,
        505,
        506,
        5,
        92,
        0,
        0,
        506,
        512,
        1,
        0,
        0,
        0,
        507,
        508,
        5,
        91,
        0,
        0,
        508,
        509,
        3,
        68,
        34,
        0,
        509,
        510,
        5,
        91,
        0,
        0,
        510,
        512,
        1,
        0,
        0,
        0,
        511,
        503,
        1,
        0,
        0,
        0,
        511,
        507,
        1,
        0,
        0,
        0,
        512,
        71,
        1,
        0,
        0,
        0,
        513,
        526,
        5,
        94,
        0,
        0,
        514,
        515,
        5,
        95,
        0,
        0,
        515,
        520,
        3,
        64,
        32,
        0,
        516,
        517,
        5,
        102,
        0,
        0,
        517,
        519,
        3,
        64,
        32,
        0,
        518,
        516,
        1,
        0,
        0,
        0,
        519,
        522,
        1,
        0,
        0,
        0,
        520,
        518,
        1,
        0,
        0,
        0,
        520,
        521,
        1,
        0,
        0,
        0,
        521,
        523,
        1,
        0,
        0,
        0,
        522,
        520,
        1,
        0,
        0,
        0,
        523,
        524,
        7,
        5,
        0,
        0,
        524,
        526,
        1,
        0,
        0,
        0,
        525,
        513,
        1,
        0,
        0,
        0,
        525,
        514,
        1,
        0,
        0,
        0,
        526,
        73,
        1,
        0,
        0,
        0,
        527,
        540,
        5,
        93,
        0,
        0,
        528,
        529,
        5,
        96,
        0,
        0,
        529,
        534,
        3,
        76,
        38,
        0,
        530,
        531,
        5,
        109,
        0,
        0,
        531,
        533,
        3,
        76,
        38,
        0,
        532,
        530,
        1,
        0,
        0,
        0,
        533,
        536,
        1,
        0,
        0,
        0,
        534,
        532,
        1,
        0,
        0,
        0,
        534,
        535,
        1,
        0,
        0,
        0,
        535,
        537,
        1,
        0,
        0,
        0,
        536,
        534,
        1,
        0,
        0,
        0,
        537,
        538,
        7,
        6,
        0,
        0,
        538,
        540,
        1,
        0,
        0,
        0,
        539,
        527,
        1,
        0,
        0,
        0,
        539,
        528,
        1,
        0,
        0,
        0,
        540,
        75,
        1,
        0,
        0,
        0,
        541,
        542,
        5,
        106,
        0,
        0,
        542,
        543,
        5,
        107,
        0,
        0,
        543,
        544,
        3,
        64,
        32,
        0,
        544,
        77,
        1,
        0,
        0,
        0,
        545,
        546,
        5,
        82,
        0,
        0,
        546,
        547,
        5,
        83,
        0,
        0,
        547,
        548,
        3,
        64,
        32,
        0,
        548,
        79,
        1,
        0,
        0,
        0,
        549,
        550,
        5,
        17,
        0,
        0,
        550,
        554,
        5,
        79,
        0,
        0,
        551,
        553,
        3,
        78,
        39,
        0,
        552,
        551,
        1,
        0,
        0,
        0,
        553,
        556,
        1,
        0,
        0,
        0,
        554,
        552,
        1,
        0,
        0,
        0,
        554,
        555,
        1,
        0,
        0,
        0,
        555,
        557,
        1,
        0,
        0,
        0,
        556,
        554,
        1,
        0,
        0,
        0,
        557,
        558,
        5,
        84,
        0,
        0,
        558,
        81,
        1,
        0,
        0,
        0,
        559,
        560,
        5,
        18,
        0,
        0,
        560,
        564,
        5,
        79,
        0,
        0,
        561,
        563,
        3,
        78,
        39,
        0,
        562,
        561,
        1,
        0,
        0,
        0,
        563,
        566,
        1,
        0,
        0,
        0,
        564,
        562,
        1,
        0,
        0,
        0,
        564,
        565,
        1,
        0,
        0,
        0,
        565,
        567,
        1,
        0,
        0,
        0,
        566,
        564,
        1,
        0,
        0,
        0,
        567,
        568,
        5,
        84,
        0,
        0,
        568,
        83,
        1,
        0,
        0,
        0,
        569,
        570,
        5,
        68,
        0,
        0,
        570,
        571,
        5,
        43,
        0,
        0,
        571,
        572,
        3,
        32,
        16,
        0,
        572,
        85,
        1,
        0,
        0,
        0,
        573,
        574,
        5,
        20,
        0,
        0,
        574,
        578,
        5,
        38,
        0,
        0,
        575,
        577,
        3,
        84,
        42,
        0,
        576,
        575,
        1,
        0,
        0,
        0,
        577,
        580,
        1,
        0,
        0,
        0,
        578,
        576,
        1,
        0,
        0,
        0,
        578,
        579,
        1,
        0,
        0,
        0,
        579,
        581,
        1,
        0,
        0,
        0,
        580,
        578,
        1,
        0,
        0,
        0,
        581,
        582,
        5,
        39,
        0,
        0,
        582,
        87,
        1,
        0,
        0,
        0,
        583,
        584,
        5,
        15,
        0,
        0,
        584,
        588,
        5,
        38,
        0,
        0,
        585,
        587,
        3,
        14,
        7,
        0,
        586,
        585,
        1,
        0,
        0,
        0,
        587,
        590,
        1,
        0,
        0,
        0,
        588,
        586,
        1,
        0,
        0,
        0,
        588,
        589,
        1,
        0,
        0,
        0,
        589,
        591,
        1,
        0,
        0,
        0,
        590,
        588,
        1,
        0,
        0,
        0,
        591,
        592,
        5,
        39,
        0,
        0,
        592,
        89,
        1,
        0,
        0,
        0,
        593,
        594,
        5,
        16,
        0,
        0,
        594,
        598,
        5,
        38,
        0,
        0,
        595,
        597,
        3,
        12,
        6,
        0,
        596,
        595,
        1,
        0,
        0,
        0,
        597,
        600,
        1,
        0,
        0,
        0,
        598,
        596,
        1,
        0,
        0,
        0,
        598,
        599,
        1,
        0,
        0,
        0,
        599,
        601,
        1,
        0,
        0,
        0,
        600,
        598,
        1,
        0,
        0,
        0,
        601,
        602,
        5,
        39,
        0,
        0,
        602,
        91,
        1,
        0,
        0,
        0,
        603,
        605,
        5,
        76,
        0,
        0,
        604,
        603,
        1,
        0,
        0,
        0,
        605,
        608,
        1,
        0,
        0,
        0,
        606,
        604,
        1,
        0,
        0,
        0,
        606,
        607,
        1,
        0,
        0,
        0,
        607,
        93,
        1,
        0,
        0,
        0,
        608,
        606,
        1,
        0,
        0,
        0,
        609,
        613,
        5,
        74,
        0,
        0,
        610,
        612,
        3,
        18,
        9,
        0,
        611,
        610,
        1,
        0,
        0,
        0,
        612,
        615,
        1,
        0,
        0,
        0,
        613,
        611,
        1,
        0,
        0,
        0,
        613,
        614,
        1,
        0,
        0,
        0,
        614,
        616,
        1,
        0,
        0,
        0,
        615,
        613,
        1,
        0,
        0,
        0,
        616,
        617,
        3,
        32,
        16,
        0,
        617,
        618,
        5,
        39,
        0,
        0,
        618,
        95,
        1,
        0,
        0,
        0,
        619,
        620,
        3,
        94,
        47,
        0,
        620,
        621,
        3,
        92,
        46,
        0,
        621,
        97,
        1,
        0,
        0,
        0,
        622,
        623,
        5,
        19,
        0,
        0,
        623,
        624,
        5,
        73,
        0,
        0,
        624,
        628,
        3,
        92,
        46,
        0,
        625,
        627,
        3,
        96,
        48,
        0,
        626,
        625,
        1,
        0,
        0,
        0,
        627,
        630,
        1,
        0,
        0,
        0,
        628,
        626,
        1,
        0,
        0,
        0,
        628,
        629,
        1,
        0,
        0,
        0,
        629,
        631,
        1,
        0,
        0,
        0,
        630,
        628,
        1,
        0,
        0,
        0,
        631,
        632,
        5,
        75,
        0,
        0,
        632,
        645,
        1,
        0,
        0,
        0,
        633,
        634,
        5,
        19,
        0,
        0,
        634,
        635,
        5,
        72,
        0,
        0,
        635,
        639,
        3,
        92,
        46,
        0,
        636,
        638,
        3,
        96,
        48,
        0,
        637,
        636,
        1,
        0,
        0,
        0,
        638,
        641,
        1,
        0,
        0,
        0,
        639,
        637,
        1,
        0,
        0,
        0,
        639,
        640,
        1,
        0,
        0,
        0,
        640,
        642,
        1,
        0,
        0,
        0,
        641,
        639,
        1,
        0,
        0,
        0,
        642,
        643,
        5,
        75,
        0,
        0,
        643,
        645,
        1,
        0,
        0,
        0,
        644,
        622,
        1,
        0,
        0,
        0,
        644,
        633,
        1,
        0,
        0,
        0,
        645,
        99,
        1,
        0,
        0,
        0,
        646,
        654,
        3,
        88,
        44,
        0,
        647,
        654,
        3,
        90,
        45,
        0,
        648,
        654,
        3,
        98,
        49,
        0,
        649,
        654,
        3,
        86,
        43,
        0,
        650,
        654,
        3,
        12,
        6,
        0,
        651,
        654,
        3,
        80,
        40,
        0,
        652,
        654,
        3,
        82,
        41,
        0,
        653,
        646,
        1,
        0,
        0,
        0,
        653,
        647,
        1,
        0,
        0,
        0,
        653,
        648,
        1,
        0,
        0,
        0,
        653,
        649,
        1,
        0,
        0,
        0,
        653,
        650,
        1,
        0,
        0,
        0,
        653,
        651,
        1,
        0,
        0,
        0,
        653,
        652,
        1,
        0,
        0,
        0,
        654,
        101,
        1,
        0,
        0,
        0,
        655,
        656,
        5,
        5,
        0,
        0,
        656,
        657,
        5,
        68,
        0,
        0,
        657,
        659,
        5,
        38,
        0,
        0,
        658,
        660,
        3,
        100,
        50,
        0,
        659,
        658,
        1,
        0,
        0,
        0,
        660,
        661,
        1,
        0,
        0,
        0,
        661,
        659,
        1,
        0,
        0,
        0,
        661,
        662,
        1,
        0,
        0,
        0,
        662,
        663,
        1,
        0,
        0,
        0,
        663,
        664,
        5,
        39,
        0,
        0,
        664,
        103,
        1,
        0,
        0,
        0,
        665,
        670,
        3,
        12,
        6,
        0,
        666,
        670,
        3,
        116,
        58,
        0,
        667,
        670,
        3,
        118,
        59,
        0,
        668,
        670,
        3,
        120,
        60,
        0,
        669,
        665,
        1,
        0,
        0,
        0,
        669,
        666,
        1,
        0,
        0,
        0,
        669,
        667,
        1,
        0,
        0,
        0,
        669,
        668,
        1,
        0,
        0,
        0,
        670,
        105,
        1,
        0,
        0,
        0,
        671,
        672,
        5,
        13,
        0,
        0,
        672,
        673,
        5,
        68,
        0,
        0,
        673,
        107,
        1,
        0,
        0,
        0,
        674,
        675,
        5,
        68,
        0,
        0,
        675,
        676,
        5,
        50,
        0,
        0,
        676,
        677,
        3,
        32,
        16,
        0,
        677,
        109,
        1,
        0,
        0,
        0,
        678,
        679,
        5,
        15,
        0,
        0,
        679,
        693,
        5,
        43,
        0,
        0,
        680,
        685,
        3,
        108,
        54,
        0,
        681,
        682,
        5,
        58,
        0,
        0,
        682,
        684,
        3,
        108,
        54,
        0,
        683,
        681,
        1,
        0,
        0,
        0,
        684,
        687,
        1,
        0,
        0,
        0,
        685,
        683,
        1,
        0,
        0,
        0,
        685,
        686,
        1,
        0,
        0,
        0,
        686,
        689,
        1,
        0,
        0,
        0,
        687,
        685,
        1,
        0,
        0,
        0,
        688,
        690,
        5,
        58,
        0,
        0,
        689,
        688,
        1,
        0,
        0,
        0,
        689,
        690,
        1,
        0,
        0,
        0,
        690,
        692,
        1,
        0,
        0,
        0,
        691,
        680,
        1,
        0,
        0,
        0,
        692,
        695,
        1,
        0,
        0,
        0,
        693,
        691,
        1,
        0,
        0,
        0,
        693,
        694,
        1,
        0,
        0,
        0,
        694,
        111,
        1,
        0,
        0,
        0,
        695,
        693,
        1,
        0,
        0,
        0,
        696,
        698,
        5,
        38,
        0,
        0,
        697,
        699,
        3,
        110,
        55,
        0,
        698,
        697,
        1,
        0,
        0,
        0,
        698,
        699,
        1,
        0,
        0,
        0,
        699,
        700,
        1,
        0,
        0,
        0,
        700,
        701,
        5,
        39,
        0,
        0,
        701,
        113,
        1,
        0,
        0,
        0,
        702,
        707,
        5,
        68,
        0,
        0,
        703,
        704,
        5,
        60,
        0,
        0,
        704,
        706,
        5,
        68,
        0,
        0,
        705,
        703,
        1,
        0,
        0,
        0,
        706,
        709,
        1,
        0,
        0,
        0,
        707,
        705,
        1,
        0,
        0,
        0,
        707,
        708,
        1,
        0,
        0,
        0,
        708,
        115,
        1,
        0,
        0,
        0,
        709,
        707,
        1,
        0,
        0,
        0,
        710,
        711,
        5,
        8,
        0,
        0,
        711,
        713,
        3,
        114,
        57,
        0,
        712,
        714,
        3,
        106,
        53,
        0,
        713,
        712,
        1,
        0,
        0,
        0,
        713,
        714,
        1,
        0,
        0,
        0,
        714,
        716,
        1,
        0,
        0,
        0,
        715,
        717,
        3,
        112,
        56,
        0,
        716,
        715,
        1,
        0,
        0,
        0,
        716,
        717,
        1,
        0,
        0,
        0,
        717,
        117,
        1,
        0,
        0,
        0,
        718,
        719,
        5,
        7,
        0,
        0,
        719,
        720,
        5,
        36,
        0,
        0,
        720,
        721,
        5,
        68,
        0,
        0,
        721,
        722,
        5,
        14,
        0,
        0,
        722,
        723,
        3,
        32,
        16,
        0,
        723,
        724,
        5,
        37,
        0,
        0,
        724,
        728,
        5,
        38,
        0,
        0,
        725,
        727,
        3,
        104,
        52,
        0,
        726,
        725,
        1,
        0,
        0,
        0,
        727,
        730,
        1,
        0,
        0,
        0,
        728,
        726,
        1,
        0,
        0,
        0,
        728,
        729,
        1,
        0,
        0,
        0,
        729,
        731,
        1,
        0,
        0,
        0,
        730,
        728,
        1,
        0,
        0,
        0,
        731,
        732,
        5,
        39,
        0,
        0,
        732,
        119,
        1,
        0,
        0,
        0,
        733,
        734,
        5,
        9,
        0,
        0,
        734,
        735,
        5,
        36,
        0,
        0,
        735,
        736,
        3,
        32,
        16,
        0,
        736,
        737,
        5,
        37,
        0,
        0,
        737,
        741,
        5,
        38,
        0,
        0,
        738,
        740,
        3,
        104,
        52,
        0,
        739,
        738,
        1,
        0,
        0,
        0,
        740,
        743,
        1,
        0,
        0,
        0,
        741,
        739,
        1,
        0,
        0,
        0,
        741,
        742,
        1,
        0,
        0,
        0,
        742,
        744,
        1,
        0,
        0,
        0,
        743,
        741,
        1,
        0,
        0,
        0,
        744,
        745,
        5,
        39,
        0,
        0,
        745,
        121,
        1,
        0,
        0,
        0,
        746,
        747,
        5,
        15,
        0,
        0,
        747,
        751,
        5,
        38,
        0,
        0,
        748,
        750,
        3,
        14,
        7,
        0,
        749,
        748,
        1,
        0,
        0,
        0,
        750,
        753,
        1,
        0,
        0,
        0,
        751,
        749,
        1,
        0,
        0,
        0,
        751,
        752,
        1,
        0,
        0,
        0,
        752,
        754,
        1,
        0,
        0,
        0,
        753,
        751,
        1,
        0,
        0,
        0,
        754,
        755,
        5,
        39,
        0,
        0,
        755,
        123,
        1,
        0,
        0,
        0,
        756,
        757,
        5,
        16,
        0,
        0,
        757,
        761,
        5,
        38,
        0,
        0,
        758,
        760,
        3,
        12,
        6,
        0,
        759,
        758,
        1,
        0,
        0,
        0,
        760,
        763,
        1,
        0,
        0,
        0,
        761,
        759,
        1,
        0,
        0,
        0,
        761,
        762,
        1,
        0,
        0,
        0,
        762,
        764,
        1,
        0,
        0,
        0,
        763,
        761,
        1,
        0,
        0,
        0,
        764,
        765,
        5,
        39,
        0,
        0,
        765,
        125,
        1,
        0,
        0,
        0,
        766,
        772,
        3,
        122,
        61,
        0,
        767,
        772,
        3,
        124,
        62,
        0,
        768,
        772,
        3,
        104,
        52,
        0,
        769,
        772,
        3,
        80,
        40,
        0,
        770,
        772,
        3,
        82,
        41,
        0,
        771,
        766,
        1,
        0,
        0,
        0,
        771,
        767,
        1,
        0,
        0,
        0,
        771,
        768,
        1,
        0,
        0,
        0,
        771,
        769,
        1,
        0,
        0,
        0,
        771,
        770,
        1,
        0,
        0,
        0,
        772,
        127,
        1,
        0,
        0,
        0,
        773,
        774,
        5,
        4,
        0,
        0,
        774,
        775,
        5,
        68,
        0,
        0,
        775,
        779,
        5,
        38,
        0,
        0,
        776,
        778,
        3,
        126,
        63,
        0,
        777,
        776,
        1,
        0,
        0,
        0,
        778,
        781,
        1,
        0,
        0,
        0,
        779,
        777,
        1,
        0,
        0,
        0,
        779,
        780,
        1,
        0,
        0,
        0,
        780,
        782,
        1,
        0,
        0,
        0,
        781,
        779,
        1,
        0,
        0,
        0,
        782,
        783,
        5,
        39,
        0,
        0,
        783,
        129,
        1,
        0,
        0,
        0,
        784,
        788,
        3,
        60,
        30,
        0,
        785,
        788,
        3,
        62,
        31,
        0,
        786,
        788,
        3,
        102,
        51,
        0,
        787,
        784,
        1,
        0,
        0,
        0,
        787,
        785,
        1,
        0,
        0,
        0,
        787,
        786,
        1,
        0,
        0,
        0,
        788,
        131,
        1,
        0,
        0,
        0,
        789,
        793,
        3,
        54,
        27,
        0,
        790,
        792,
        3,
        130,
        65,
        0,
        791,
        790,
        1,
        0,
        0,
        0,
        792,
        795,
        1,
        0,
        0,
        0,
        793,
        791,
        1,
        0,
        0,
        0,
        793,
        794,
        1,
        0,
        0,
        0,
        794,
        803,
        1,
        0,
        0,
        0,
        795,
        793,
        1,
        0,
        0,
        0,
        796,
        800,
        3,
        128,
        64,
        0,
        797,
        799,
        3,
        130,
        65,
        0,
        798,
        797,
        1,
        0,
        0,
        0,
        799,
        802,
        1,
        0,
        0,
        0,
        800,
        798,
        1,
        0,
        0,
        0,
        800,
        801,
        1,
        0,
        0,
        0,
        801,
        804,
        1,
        0,
        0,
        0,
        802,
        800,
        1,
        0,
        0,
        0,
        803,
        796,
        1,
        0,
        0,
        0,
        803,
        804,
        1,
        0,
        0,
        0,
        804,
        805,
        1,
        0,
        0,
        0,
        805,
        806,
        5,
        0,
        0,
        1,
        806,
        133,
        1,
        0,
        0,
        0,
        807,
        808,
        3,
        8,
        4,
        0,
        808,
        809,
        5,
        0,
        0,
        1,
        809,
        135,
        1,
        0,
        0,
        0,
        810,
        811,
        3,
        32,
        16,
        0,
        811,
        812,
        5,
        0,
        0,
        1,
        812,
        137,
        1,
        0,
        0,
        0,
        75,
        150,
        163,
        169,
        181,
        192,
        199,
        206,
        220,
        230,
        235,
        241,
        255,
        266,
        290,
        292,
        304,
        306,
        321,
        323,
        331,
        345,
        349,
        351,
        371,
        375,
        379,
        400,
        404,
        408,
        424,
        428,
        432,
        438,
        448,
        450,
        467,
        472,
        481,
        493,
        500,
        511,
        520,
        525,
        534,
        539,
        554,
        564,
        578,
        588,
        598,
        606,
        613,
        628,
        639,
        644,
        653,
        661,
        669,
        685,
        689,
        693,
        698,
        707,
        713,
        716,
        728,
        741,
        751,
        761,
        771,
        779,
        787,
        793,
        800,
        803,
    ]


class WdlV1Parser(Parser):

    grammarFileName = "WdlV1Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "'version'",
        "'import'",
        "'workflow'",
        "'task'",
        "'struct'",
        "'scatter'",
        "'call'",
        "'if'",
        "'then'",
        "'else'",
        "'alias'",
        "'as'",
        "'in'",
        "'input'",
        "'output'",
        "'parameter_meta'",
        "'meta'",
        "'command'",
        "'runtime'",
        "'Boolean'",
        "'Int'",
        "'Float'",
        "'String'",
        "'File'",
        "'Array'",
        "'Map'",
        "'Pair'",
        "'Object'",
        "'object'",
        "'sep='",
        "'default='",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'('",
        "')'",
        "<INVALID>",
        "<INVALID>",
        "'['",
        "<INVALID>",
        "'\\'",
        "<INVALID>",
        "'<'",
        "'>'",
        "'>='",
        "'<='",
        "'=='",
        "'!='",
        "'='",
        "'&&'",
        "'||'",
        "'?'",
        "'*'",
        "'+'",
        "'-'",
        "<INVALID>",
        "<INVALID>",
        "';'",
        "'.'",
        "'!'",
        "<INVALID>",
        "'/'",
        "'%'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'<<<'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'\\>>>'",
    ]

    symbolicNames = [
        "<INVALID>",
        "LINE_COMMENT",
        "VERSION",
        "IMPORT",
        "WORKFLOW",
        "TASK",
        "STRUCT",
        "SCATTER",
        "CALL",
        "IF",
        "THEN",
        "ELSE",
        "ALIAS",
        "AS",
        "In",
        "INPUT",
        "OUTPUT",
        "PARAMETERMETA",
        "META",
        "COMMAND",
        "RUNTIME",
        "BOOLEAN",
        "INT",
        "FLOAT",
        "STRING",
        "FILE",
        "ARRAY",
        "MAP",
        "PAIR",
        "OBJECT",
        "OBJECTLITERAL",
        "SEPEQUAL",
        "DEFAULTEQUAL",
        "IntLiteral",
        "FloatLiteral",
        "BoolLiteral",
        "LPAREN",
        "RPAREN",
        "LBRACE",
        "RBRACE",
        "LBRACK",
        "RBRACK",
        "ESC",
        "COLON",
        "LT",
        "GT",
        "GTE",
        "LTE",
        "EQUALITY",
        "NOTEQUAL",
        "EQUAL",
        "AND",
        "OR",
        "OPTIONAL",
        "STAR",
        "PLUS",
        "MINUS",
        "DOLLAR",
        "COMMA",
        "SEMI",
        "DOT",
        "NOT",
        "TILDE",
        "DIVIDE",
        "MOD",
        "SQUOTE",
        "DQUOTE",
        "WHITESPACE",
        "Identifier",
        "EscStringPart",
        "StringPart",
        "BeginWhitespace",
        "BeginHereDoc",
        "BeginLBrace",
        "StringCommandStart",
        "EndCommand",
        "CommandStringPart",
        "VersionWhitespace",
        "ReleaseVersion",
        "BeginMeta",
        "MetaWhitespace",
        "MetaBodyComment",
        "MetaIdentifier",
        "MetaColon",
        "EndMeta",
        "MetaBodyWhitespace",
        "MetaValueComment",
        "MetaBool",
        "MetaInt",
        "MetaFloat",
        "MetaNull",
        "MetaSquote",
        "MetaDquote",
        "MetaEmptyObject",
        "MetaEmptyArray",
        "MetaLbrack",
        "MetaLbrace",
        "MetaValueWhitespace",
        "MetaEscStringPart",
        "MetaStringPart",
        "MetaArrayComment",
        "MetaArrayCommaRbrack",
        "MetaArrayComma",
        "MetaRbrack",
        "MetaArrayWhitespace",
        "MetaObjectComment",
        "MetaObjectIdentifier",
        "MetaObjectColon",
        "MetaObjectCommaRbrace",
        "MetaObjectComma",
        "MetaRbrace",
        "MetaObjectWhitespace",
        "HereDocEscapedEnd",
    ]

    RULE_map_type = 0
    RULE_array_type = 1
    RULE_pair_type = 2
    RULE_type_base = 3
    RULE_wdl_type = 4
    RULE_unbound_decls = 5
    RULE_bound_decls = 6
    RULE_any_decls = 7
    RULE_number = 8
    RULE_expression_placeholder_option = 9
    RULE_string_part = 10
    RULE_string_parts = 11
    RULE_string_expr_part = 12
    RULE_string_expr_with_string_part = 13
    RULE_string = 14
    RULE_primitive_literal = 15
    RULE_expr = 16
    RULE_expr_infix = 17
    RULE_expr_infix0 = 18
    RULE_expr_infix1 = 19
    RULE_expr_infix2 = 20
    RULE_expr_infix3 = 21
    RULE_expr_infix4 = 22
    RULE_expr_infix5 = 23
    RULE_expr_infix6 = 24
    RULE_member = 25
    RULE_expr_core = 26
    RULE_version = 27
    RULE_import_alias = 28
    RULE_import_as = 29
    RULE_import_doc = 30
    RULE_struct = 31
    RULE_meta_value = 32
    RULE_meta_string_part = 33
    RULE_meta_string_parts = 34
    RULE_meta_string = 35
    RULE_meta_array = 36
    RULE_meta_object = 37
    RULE_meta_object_kv = 38
    RULE_meta_kv = 39
    RULE_parameter_meta = 40
    RULE_meta = 41
    RULE_task_runtime_kv = 42
    RULE_task_runtime = 43
    RULE_task_input = 44
    RULE_task_output = 45
    RULE_task_command_string_parts = 46
    RULE_task_command_expr_part = 47
    RULE_task_command_expr_with_string = 48
    RULE_task_command = 49
    RULE_task_element = 50
    RULE_task = 51
    RULE_inner_workflow_element = 52
    RULE_call_alias = 53
    RULE_call_input = 54
    RULE_call_inputs = 55
    RULE_call_body = 56
    RULE_call_name = 57
    RULE_call = 58
    RULE_scatter = 59
    RULE_conditional = 60
    RULE_workflow_input = 61
    RULE_workflow_output = 62
    RULE_workflow_element = 63
    RULE_workflow = 64
    RULE_document_element = 65
    RULE_document = 66
    RULE_type_document = 67
    RULE_expr_document = 68

    ruleNames = [
        "map_type",
        "array_type",
        "pair_type",
        "type_base",
        "wdl_type",
        "unbound_decls",
        "bound_decls",
        "any_decls",
        "number",
        "expression_placeholder_option",
        "string_part",
        "string_parts",
        "string_expr_part",
        "string_expr_with_string_part",
        "string",
        "primitive_literal",
        "expr",
        "expr_infix",
        "expr_infix0",
        "expr_infix1",
        "expr_infix2",
        "expr_infix3",
        "expr_infix4",
        "expr_infix5",
        "expr_infix6",
        "member",
        "expr_core",
        "version",
        "import_alias",
        "import_as",
        "import_doc",
        "struct",
        "meta_value",
        "meta_string_part",
        "meta_string_parts",
        "meta_string",
        "meta_array",
        "meta_object",
        "meta_object_kv",
        "meta_kv",
        "parameter_meta",
        "meta",
        "task_runtime_kv",
        "task_runtime",
        "task_input",
        "task_output",
        "task_command_string_parts",
        "task_command_expr_part",
        "task_command_expr_with_string",
        "task_command",
        "task_element",
        "task",
        "inner_workflow_element",
        "call_alias",
        "call_input",
        "call_inputs",
        "call_body",
        "call_name",
        "call",
        "scatter",
        "conditional",
        "workflow_input",
        "workflow_output",
        "workflow_element",
        "workflow",
        "document_element",
        "document",
        "type_document",
        "expr_document",
    ]

    EOF = Token.EOF
    LINE_COMMENT = 1
    VERSION = 2
    IMPORT = 3
    WORKFLOW = 4
    TASK = 5
    STRUCT = 6
    SCATTER = 7
    CALL = 8
    IF = 9
    THEN = 10
    ELSE = 11
    ALIAS = 12
    AS = 13
    In = 14
    INPUT = 15
    OUTPUT = 16
    PARAMETERMETA = 17
    META = 18
    COMMAND = 19
    RUNTIME = 20
    BOOLEAN = 21
    INT = 22
    FLOAT = 23
    STRING = 24
    FILE = 25
    ARRAY = 26
    MAP = 27
    PAIR = 28
    OBJECT = 29
    OBJECTLITERAL = 30
    SEPEQUAL = 31
    DEFAULTEQUAL = 32
    IntLiteral = 33
    FloatLiteral = 34
    BoolLiteral = 35
    LPAREN = 36
    RPAREN = 37
    LBRACE = 38
    RBRACE = 39
    LBRACK = 40
    RBRACK = 41
    ESC = 42
    COLON = 43
    LT = 44
    GT = 45
    GTE = 46
    LTE = 47
    EQUALITY = 48
    NOTEQUAL = 49
    EQUAL = 50
    AND = 51
    OR = 52
    OPTIONAL = 53
    STAR = 54
    PLUS = 55
    MINUS = 56
    DOLLAR = 57
    COMMA = 58
    SEMI = 59
    DOT = 60
    NOT = 61
    TILDE = 62
    DIVIDE = 63
    MOD = 64
    SQUOTE = 65
    DQUOTE = 66
    WHITESPACE = 67
    Identifier = 68
    EscStringPart = 69
    StringPart = 70
    BeginWhitespace = 71
    BeginHereDoc = 72
    BeginLBrace = 73
    StringCommandStart = 74
    EndCommand = 75
    CommandStringPart = 76
    VersionWhitespace = 77
    ReleaseVersion = 78
    BeginMeta = 79
    MetaWhitespace = 80
    MetaBodyComment = 81
    MetaIdentifier = 82
    MetaColon = 83
    EndMeta = 84
    MetaBodyWhitespace = 85
    MetaValueComment = 86
    MetaBool = 87
    MetaInt = 88
    MetaFloat = 89
    MetaNull = 90
    MetaSquote = 91
    MetaDquote = 92
    MetaEmptyObject = 93
    MetaEmptyArray = 94
    MetaLbrack = 95
    MetaLbrace = 96
    MetaValueWhitespace = 97
    MetaEscStringPart = 98
    MetaStringPart = 99
    MetaArrayComment = 100
    MetaArrayCommaRbrack = 101
    MetaArrayComma = 102
    MetaRbrack = 103
    MetaArrayWhitespace = 104
    MetaObjectComment = 105
    MetaObjectIdentifier = 106
    MetaObjectColon = 107
    MetaObjectCommaRbrace = 108
    MetaObjectComma = 109
    MetaRbrace = 110
    MetaObjectWhitespace = 111
    HereDocEscapedEnd = 112

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class Map_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(WdlV1Parser.MAP, 0)

        def LBRACK(self):
            return self.getToken(WdlV1Parser.LBRACK, 0)

        def wdl_type(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Wdl_typeContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Wdl_typeContext, i)

        def COMMA(self):
            return self.getToken(WdlV1Parser.COMMA, 0)

        def RBRACK(self):
            return self.getToken(WdlV1Parser.RBRACK, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_map_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMap_type"):
                listener.enterMap_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMap_type"):
                listener.exitMap_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMap_type"):
                return visitor.visitMap_type(self)
            else:
                return visitor.visitChildren(self)

    def map_type(self):

        localctx = WdlV1Parser.Map_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_map_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.match(WdlV1Parser.MAP)
            self.state = 139
            self.match(WdlV1Parser.LBRACK)
            self.state = 140
            self.wdl_type()
            self.state = 141
            self.match(WdlV1Parser.COMMA)
            self.state = 142
            self.wdl_type()
            self.state = 143
            self.match(WdlV1Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(WdlV1Parser.ARRAY, 0)

        def LBRACK(self):
            return self.getToken(WdlV1Parser.LBRACK, 0)

        def wdl_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Wdl_typeContext, 0)

        def RBRACK(self):
            return self.getToken(WdlV1Parser.RBRACK, 0)

        def PLUS(self):
            return self.getToken(WdlV1Parser.PLUS, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_array_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArray_type"):
                listener.enterArray_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArray_type"):
                listener.exitArray_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArray_type"):
                return visitor.visitArray_type(self)
            else:
                return visitor.visitChildren(self)

    def array_type(self):

        localctx = WdlV1Parser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_array_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 145
            self.match(WdlV1Parser.ARRAY)
            self.state = 146
            self.match(WdlV1Parser.LBRACK)
            self.state = 147
            self.wdl_type()
            self.state = 148
            self.match(WdlV1Parser.RBRACK)
            self.state = 150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 55:
                self.state = 149
                self.match(WdlV1Parser.PLUS)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pair_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAIR(self):
            return self.getToken(WdlV1Parser.PAIR, 0)

        def LBRACK(self):
            return self.getToken(WdlV1Parser.LBRACK, 0)

        def wdl_type(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Wdl_typeContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Wdl_typeContext, i)

        def COMMA(self):
            return self.getToken(WdlV1Parser.COMMA, 0)

        def RBRACK(self):
            return self.getToken(WdlV1Parser.RBRACK, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_pair_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPair_type"):
                listener.enterPair_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPair_type"):
                listener.exitPair_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPair_type"):
                return visitor.visitPair_type(self)
            else:
                return visitor.visitChildren(self)

    def pair_type(self):

        localctx = WdlV1Parser.Pair_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pair_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(WdlV1Parser.PAIR)
            self.state = 153
            self.match(WdlV1Parser.LBRACK)
            self.state = 154
            self.wdl_type()
            self.state = 155
            self.match(WdlV1Parser.COMMA)
            self.state = 156
            self.wdl_type()
            self.state = 157
            self.match(WdlV1Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_baseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Array_typeContext, 0)

        def map_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Map_typeContext, 0)

        def pair_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Pair_typeContext, 0)

        def STRING(self):
            return self.getToken(WdlV1Parser.STRING, 0)

        def FILE(self):
            return self.getToken(WdlV1Parser.FILE, 0)

        def BOOLEAN(self):
            return self.getToken(WdlV1Parser.BOOLEAN, 0)

        def OBJECT(self):
            return self.getToken(WdlV1Parser.OBJECT, 0)

        def INT(self):
            return self.getToken(WdlV1Parser.INT, 0)

        def FLOAT(self):
            return self.getToken(WdlV1Parser.FLOAT, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_type_base

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_base"):
                listener.enterType_base(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_base"):
                listener.exitType_base(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_base"):
                return visitor.visitType_base(self)
            else:
                return visitor.visitChildren(self)

    def type_base(self):

        localctx = WdlV1Parser.Type_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_type_base)
        self._la = 0  # Token type
        try:
            self.state = 163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 159
                self.array_type()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 160
                self.map_type()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 161
                self.pair_type()
                pass
            elif token in [21, 22, 23, 24, 25, 29, 68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 162
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 21)) & ~0x3F) == 0
                        and ((1 << (_la - 21)) & 140737488355615) != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wdl_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_base(self):
            return self.getTypedRuleContext(WdlV1Parser.Type_baseContext, 0)

        def OPTIONAL(self):
            return self.getToken(WdlV1Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_wdl_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWdl_type"):
                listener.enterWdl_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWdl_type"):
                listener.exitWdl_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWdl_type"):
                return visitor.visitWdl_type(self)
            else:
                return visitor.visitChildren(self)

    def wdl_type(self):

        localctx = WdlV1Parser.Wdl_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_wdl_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.state = 165
                self.type_base()
                self.state = 166
                self.match(WdlV1Parser.OPTIONAL)
                pass

            elif la_ == 2:
                self.state = 168
                self.type_base()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unbound_declsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wdl_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Wdl_typeContext, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_unbound_decls

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnbound_decls"):
                listener.enterUnbound_decls(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnbound_decls"):
                listener.exitUnbound_decls(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnbound_decls"):
                return visitor.visitUnbound_decls(self)
            else:
                return visitor.visitChildren(self)

    def unbound_decls(self):

        localctx = WdlV1Parser.Unbound_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unbound_decls)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self.wdl_type()
            self.state = 172
            self.match(WdlV1Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bound_declsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wdl_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Wdl_typeContext, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def EQUAL(self):
            return self.getToken(WdlV1Parser.EQUAL, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_bound_decls

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBound_decls"):
                listener.enterBound_decls(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBound_decls"):
                listener.exitBound_decls(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBound_decls"):
                return visitor.visitBound_decls(self)
            else:
                return visitor.visitChildren(self)

    def bound_decls(self):

        localctx = WdlV1Parser.Bound_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_bound_decls)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.wdl_type()
            self.state = 175
            self.match(WdlV1Parser.Identifier)
            self.state = 176
            self.match(WdlV1Parser.EQUAL)
            self.state = 177
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_declsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unbound_decls(self):
            return self.getTypedRuleContext(WdlV1Parser.Unbound_declsContext, 0)

        def bound_decls(self):
            return self.getTypedRuleContext(WdlV1Parser.Bound_declsContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_any_decls

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_decls"):
                listener.enterAny_decls(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_decls"):
                listener.exitAny_decls(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAny_decls"):
                return visitor.visitAny_decls(self)
            else:
                return visitor.visitChildren(self)

    def any_decls(self):

        localctx = WdlV1Parser.Any_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_any_decls)
        try:
            self.state = 181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 179
                self.unbound_decls()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 180
                self.bound_decls()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLiteral(self):
            return self.getToken(WdlV1Parser.IntLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(WdlV1Parser.FloatLiteral, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumber"):
                listener.enterNumber(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumber"):
                listener.exitNumber(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumber"):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)

    def number(self):

        localctx = WdlV1Parser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_number)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            _la = self._input.LA(1)
            if not (_la == 33 or _la == 34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_placeholder_optionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolLiteral(self):
            return self.getToken(WdlV1Parser.BoolLiteral, 0)

        def EQUAL(self):
            return self.getToken(WdlV1Parser.EQUAL, 0)

        def string(self):
            return self.getTypedRuleContext(WdlV1Parser.StringContext, 0)

        def SEPEQUAL(self):
            return self.getToken(WdlV1Parser.SEPEQUAL, 0)

        def DEFAULTEQUAL(self):
            return self.getToken(WdlV1Parser.DEFAULTEQUAL, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expression_placeholder_option

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression_placeholder_option"):
                listener.enterExpression_placeholder_option(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression_placeholder_option"):
                listener.exitExpression_placeholder_option(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression_placeholder_option"):
                return visitor.visitExpression_placeholder_option(self)
            else:
                return visitor.visitChildren(self)

    def expression_placeholder_option(self):

        localctx = WdlV1Parser.Expression_placeholder_optionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 18, self.RULE_expression_placeholder_option)
        try:
            self.state = 192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 185
                self.match(WdlV1Parser.BoolLiteral)
                self.state = 186
                self.match(WdlV1Parser.EQUAL)
                self.state = 187
                self.string()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 188
                self.match(WdlV1Parser.SEPEQUAL)
                self.state = 189
                self.string()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 190
                self.match(WdlV1Parser.DEFAULTEQUAL)
                self.state = 191
                self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_partContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EscStringPart(self):
            return self.getToken(WdlV1Parser.EscStringPart, 0)

        def StringPart(self):
            return self.getToken(WdlV1Parser.StringPart, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_string_part

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_part"):
                listener.enterString_part(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_part"):
                listener.exitString_part(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString_part"):
                return visitor.visitString_part(self)
            else:
                return visitor.visitChildren(self)

    def string_part(self):

        localctx = WdlV1Parser.String_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_string_part)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            _la = self._input.LA(1)
            if not (_la == 69 or _la == 70):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_partsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_part(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.String_partContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.String_partContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_string_parts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_parts"):
                listener.enterString_parts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_parts"):
                listener.exitString_parts(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString_parts"):
                return visitor.visitString_parts(self)
            else:
                return visitor.visitChildren(self)

    def string_parts(self):

        localctx = WdlV1Parser.String_partsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_string_parts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 69 or _la == 70:
                self.state = 196
                self.string_part()
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_expr_partContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringCommandStart(self):
            return self.getToken(WdlV1Parser.StringCommandStart, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def expression_placeholder_option(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.Expression_placeholder_optionContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.Expression_placeholder_optionContext, i
                )

        def getRuleIndex(self):
            return WdlV1Parser.RULE_string_expr_part

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_expr_part"):
                listener.enterString_expr_part(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_expr_part"):
                listener.exitString_expr_part(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString_expr_part"):
                return visitor.visitString_expr_part(self)
            else:
                return visitor.visitChildren(self)

    def string_expr_part(self):

        localctx = WdlV1Parser.String_expr_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_string_expr_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(WdlV1Parser.StringCommandStart)
            self.state = 206
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 203
                    self.expression_placeholder_option()
                self.state = 208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

            self.state = 209
            self.expr()
            self.state = 210
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_expr_with_string_partContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_expr_part(self):
            return self.getTypedRuleContext(WdlV1Parser.String_expr_partContext, 0)

        def string_parts(self):
            return self.getTypedRuleContext(WdlV1Parser.String_partsContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_string_expr_with_string_part

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_expr_with_string_part"):
                listener.enterString_expr_with_string_part(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_expr_with_string_part"):
                listener.exitString_expr_with_string_part(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString_expr_with_string_part"):
                return visitor.visitString_expr_with_string_part(self)
            else:
                return visitor.visitChildren(self)

    def string_expr_with_string_part(self):

        localctx = WdlV1Parser.String_expr_with_string_partContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 26, self.RULE_string_expr_with_string_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.string_expr_part()
            self.state = 213
            self.string_parts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_string

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class Squote_stringContext(StringContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQUOTE(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.SQUOTE)
            else:
                return self.getToken(WdlV1Parser.SQUOTE, i)

        def string_parts(self):
            return self.getTypedRuleContext(WdlV1Parser.String_partsContext, 0)

        def string_expr_with_string_part(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.String_expr_with_string_partContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.String_expr_with_string_partContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSquote_string"):
                listener.enterSquote_string(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSquote_string"):
                listener.exitSquote_string(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSquote_string"):
                return visitor.visitSquote_string(self)
            else:
                return visitor.visitChildren(self)

    class Dquote_stringContext(StringContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DQUOTE(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.DQUOTE)
            else:
                return self.getToken(WdlV1Parser.DQUOTE, i)

        def string_parts(self):
            return self.getTypedRuleContext(WdlV1Parser.String_partsContext, 0)

        def string_expr_with_string_part(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.String_expr_with_string_partContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.String_expr_with_string_partContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDquote_string"):
                listener.enterDquote_string(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDquote_string"):
                listener.exitDquote_string(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDquote_string"):
                return visitor.visitDquote_string(self)
            else:
                return visitor.visitChildren(self)

    def string(self):

        localctx = WdlV1Parser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_string)
        self._la = 0  # Token type
        try:
            self.state = 235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                localctx = WdlV1Parser.Dquote_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 215
                self.match(WdlV1Parser.DQUOTE)
                self.state = 216
                self.string_parts()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 74:
                    self.state = 217
                    self.string_expr_with_string_part()
                    self.state = 222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 223
                self.match(WdlV1Parser.DQUOTE)
                pass
            elif token in [65]:
                localctx = WdlV1Parser.Squote_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.match(WdlV1Parser.SQUOTE)
                self.state = 226
                self.string_parts()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 74:
                    self.state = 227
                    self.string_expr_with_string_part()
                    self.state = 232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 233
                self.match(WdlV1Parser.SQUOTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primitive_literalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolLiteral(self):
            return self.getToken(WdlV1Parser.BoolLiteral, 0)

        def number(self):
            return self.getTypedRuleContext(WdlV1Parser.NumberContext, 0)

        def string(self):
            return self.getTypedRuleContext(WdlV1Parser.StringContext, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_primitive_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitive_literal"):
                listener.enterPrimitive_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitive_literal"):
                listener.exitPrimitive_literal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitive_literal"):
                return visitor.visitPrimitive_literal(self)
            else:
                return visitor.visitChildren(self)

    def primitive_literal(self):

        localctx = WdlV1Parser.Primitive_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_primitive_literal)
        try:
            self.state = 241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(WdlV1Parser.BoolLiteral)
                pass
            elif token in [33, 34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self.number()
                pass
            elif token in [65, 66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 239
                self.string()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 240
                self.match(WdlV1Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_infix(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infixContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self):

        localctx = WdlV1Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.expr_infix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_infixContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class Infix0Context(Expr_infixContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infixContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix0(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix0Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix0"):
                listener.enterInfix0(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix0"):
                listener.exitInfix0(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix0"):
                return visitor.visitInfix0(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix(self):

        localctx = WdlV1Parser.Expr_infixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_expr_infix)
        try:
            localctx = WdlV1Parser.Infix0Context(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.expr_infix0(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_infix0Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix0

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class Infix1Context(Expr_infix0Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix0Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix1(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix1Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix1"):
                listener.enterInfix1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix1"):
                listener.exitInfix1(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix1"):
                return visitor.visitInfix1(self)
            else:
                return visitor.visitChildren(self)

    class LorContext(Expr_infix0Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix0Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix0(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix0Context, 0)

        def OR(self):
            return self.getToken(WdlV1Parser.OR, 0)

        def expr_infix1(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix1Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLor"):
                listener.enterLor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLor"):
                listener.exitLor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLor"):
                return visitor.visitLor(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix0(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = WdlV1Parser.Expr_infix0Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_expr_infix0, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = WdlV1Parser.Infix1Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 248
            self.expr_infix1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = WdlV1Parser.LorContext(
                        self,
                        WdlV1Parser.Expr_infix0Context(self, _parentctx, _parentState),
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_expr_infix0
                    )
                    self.state = 250
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 251
                    self.match(WdlV1Parser.OR)
                    self.state = 252
                    self.expr_infix1(0)
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Expr_infix1Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix1

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class Infix2Context(Expr_infix1Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix2"):
                listener.enterInfix2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix2"):
                listener.exitInfix2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix2"):
                return visitor.visitInfix2(self)
            else:
                return visitor.visitChildren(self)

    class LandContext(Expr_infix1Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix1(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix1Context, 0)

        def AND(self):
            return self.getToken(WdlV1Parser.AND, 0)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLand"):
                listener.enterLand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLand"):
                listener.exitLand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLand"):
                return visitor.visitLand(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix1(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = WdlV1Parser.Expr_infix1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_expr_infix1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = WdlV1Parser.Infix2Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 259
            self.expr_infix2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 266
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 12, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = WdlV1Parser.LandContext(
                        self,
                        WdlV1Parser.Expr_infix1Context(self, _parentctx, _parentState),
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_expr_infix1
                    )
                    self.state = 261
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 262
                    self.match(WdlV1Parser.AND)
                    self.state = 263
                    self.expr_infix2(0)
                self.state = 268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 12, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Expr_infix2Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix2

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class EqeqContext(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def EQUALITY(self):
            return self.getToken(WdlV1Parser.EQUALITY, 0)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqeq"):
                listener.enterEqeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqeq"):
                listener.exitEqeq(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEqeq"):
                return visitor.visitEqeq(self)
            else:
                return visitor.visitChildren(self)

    class LtContext(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def LT(self):
            return self.getToken(WdlV1Parser.LT, 0)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLt"):
                listener.enterLt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLt"):
                listener.exitLt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLt"):
                return visitor.visitLt(self)
            else:
                return visitor.visitChildren(self)

    class Infix3Context(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix3"):
                listener.enterInfix3(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix3"):
                listener.exitInfix3(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix3"):
                return visitor.visitInfix3(self)
            else:
                return visitor.visitChildren(self)

    class GteContext(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def GTE(self):
            return self.getToken(WdlV1Parser.GTE, 0)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGte"):
                listener.enterGte(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGte"):
                listener.exitGte(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGte"):
                return visitor.visitGte(self)
            else:
                return visitor.visitChildren(self)

    class NeqContext(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def NOTEQUAL(self):
            return self.getToken(WdlV1Parser.NOTEQUAL, 0)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNeq"):
                listener.enterNeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNeq"):
                listener.exitNeq(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNeq"):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)

    class LteContext(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def LTE(self):
            return self.getToken(WdlV1Parser.LTE, 0)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLte"):
                listener.enterLte(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLte"):
                listener.exitLte(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLte"):
                return visitor.visitLte(self)
            else:
                return visitor.visitChildren(self)

    class GtContext(Expr_infix2Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix2(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix2Context, 0)

        def GT(self):
            return self.getToken(WdlV1Parser.GT, 0)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGt"):
                listener.enterGt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGt"):
                listener.exitGt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGt"):
                return visitor.visitGt(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix2(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = WdlV1Parser.Expr_infix2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_expr_infix2, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = WdlV1Parser.Infix3Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 270
            self.expr_infix3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 290
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                    if la_ == 1:
                        localctx = WdlV1Parser.EqeqContext(
                            self,
                            WdlV1Parser.Expr_infix2Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix2
                        )
                        self.state = 272
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 7)"
                            )
                        self.state = 273
                        self.match(WdlV1Parser.EQUALITY)
                        self.state = 274
                        self.expr_infix3(0)
                        pass

                    elif la_ == 2:
                        localctx = WdlV1Parser.NeqContext(
                            self,
                            WdlV1Parser.Expr_infix2Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix2
                        )
                        self.state = 275
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 276
                        self.match(WdlV1Parser.NOTEQUAL)
                        self.state = 277
                        self.expr_infix3(0)
                        pass

                    elif la_ == 3:
                        localctx = WdlV1Parser.LteContext(
                            self,
                            WdlV1Parser.Expr_infix2Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix2
                        )
                        self.state = 278
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 279
                        self.match(WdlV1Parser.LTE)
                        self.state = 280
                        self.expr_infix3(0)
                        pass

                    elif la_ == 4:
                        localctx = WdlV1Parser.GteContext(
                            self,
                            WdlV1Parser.Expr_infix2Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix2
                        )
                        self.state = 281
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 282
                        self.match(WdlV1Parser.GTE)
                        self.state = 283
                        self.expr_infix3(0)
                        pass

                    elif la_ == 5:
                        localctx = WdlV1Parser.LtContext(
                            self,
                            WdlV1Parser.Expr_infix2Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix2
                        )
                        self.state = 284
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 285
                        self.match(WdlV1Parser.LT)
                        self.state = 286
                        self.expr_infix3(0)
                        pass

                    elif la_ == 6:
                        localctx = WdlV1Parser.GtContext(
                            self,
                            WdlV1Parser.Expr_infix2Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix2
                        )
                        self.state = 287
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 288
                        self.match(WdlV1Parser.GT)
                        self.state = 289
                        self.expr_infix3(0)
                        pass

                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Expr_infix3Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix3

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AddContext(Expr_infix3Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix3Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def PLUS(self):
            return self.getToken(WdlV1Parser.PLUS, 0)

        def expr_infix4(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix4Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdd"):
                listener.enterAdd(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdd"):
                listener.exitAdd(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAdd"):
                return visitor.visitAdd(self)
            else:
                return visitor.visitChildren(self)

    class SubContext(Expr_infix3Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix3Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix3(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix3Context, 0)

        def MINUS(self):
            return self.getToken(WdlV1Parser.MINUS, 0)

        def expr_infix4(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix4Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSub"):
                listener.enterSub(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSub"):
                listener.exitSub(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSub"):
                return visitor.visitSub(self)
            else:
                return visitor.visitChildren(self)

    class Infix4Context(Expr_infix3Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix3Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix4(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix4Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix4"):
                listener.enterInfix4(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix4"):
                listener.exitInfix4(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix4"):
                return visitor.visitInfix4(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix3(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = WdlV1Parser.Expr_infix3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_expr_infix3, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = WdlV1Parser.Infix4Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 296
            self.expr_infix4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 306
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 304
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                    if la_ == 1:
                        localctx = WdlV1Parser.AddContext(
                            self,
                            WdlV1Parser.Expr_infix3Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix3
                        )
                        self.state = 298
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 299
                        self.match(WdlV1Parser.PLUS)
                        self.state = 300
                        self.expr_infix4(0)
                        pass

                    elif la_ == 2:
                        localctx = WdlV1Parser.SubContext(
                            self,
                            WdlV1Parser.Expr_infix3Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix3
                        )
                        self.state = 301
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 302
                        self.match(WdlV1Parser.MINUS)
                        self.state = 303
                        self.expr_infix4(0)
                        pass

                self.state = 308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Expr_infix4Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix4

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ModContext(Expr_infix4Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix4Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix4(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix4Context, 0)

        def MOD(self):
            return self.getToken(WdlV1Parser.MOD, 0)

        def expr_infix5(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix5Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMod"):
                listener.enterMod(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMod"):
                listener.exitMod(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMod"):
                return visitor.visitMod(self)
            else:
                return visitor.visitChildren(self)

    class MulContext(Expr_infix4Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix4Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix4(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix4Context, 0)

        def STAR(self):
            return self.getToken(WdlV1Parser.STAR, 0)

        def expr_infix5(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix5Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMul"):
                listener.enterMul(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMul"):
                listener.exitMul(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMul"):
                return visitor.visitMul(self)
            else:
                return visitor.visitChildren(self)

    class DivideContext(Expr_infix4Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix4Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix4(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix4Context, 0)

        def DIVIDE(self):
            return self.getToken(WdlV1Parser.DIVIDE, 0)

        def expr_infix5(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix5Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDivide"):
                listener.enterDivide(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDivide"):
                listener.exitDivide(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDivide"):
                return visitor.visitDivide(self)
            else:
                return visitor.visitChildren(self)

    class Infix5Context(Expr_infix4Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix4Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix5(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix5Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix5"):
                listener.enterInfix5(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix5"):
                listener.exitInfix5(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix5"):
                return visitor.visitInfix5(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix4(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = WdlV1Parser.Expr_infix4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_expr_infix4, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = WdlV1Parser.Infix5Context(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 310
            self.expr_infix5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 18, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 321
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                    if la_ == 1:
                        localctx = WdlV1Parser.MulContext(
                            self,
                            WdlV1Parser.Expr_infix4Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix4
                        )
                        self.state = 312
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 313
                        self.match(WdlV1Parser.STAR)
                        self.state = 314
                        self.expr_infix5()
                        pass

                    elif la_ == 2:
                        localctx = WdlV1Parser.DivideContext(
                            self,
                            WdlV1Parser.Expr_infix4Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix4
                        )
                        self.state = 315
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 316
                        self.match(WdlV1Parser.DIVIDE)
                        self.state = 317
                        self.expr_infix5()
                        pass

                    elif la_ == 3:
                        localctx = WdlV1Parser.ModContext(
                            self,
                            WdlV1Parser.Expr_infix4Context(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_infix4
                        )
                        self.state = 318
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 319
                        self.match(WdlV1Parser.MOD)
                        self.state = 320
                        self.expr_infix5()
                        pass

                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 18, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Expr_infix5Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix5

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class UnarysignedContext(Expr_infix5Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix5Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix5(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix5Context, 0)

        def PLUS(self):
            return self.getToken(WdlV1Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(WdlV1Parser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnarysigned"):
                listener.enterUnarysigned(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnarysigned"):
                listener.exitUnarysigned(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnarysigned"):
                return visitor.visitUnarysigned(self)
            else:
                return visitor.visitChildren(self)

    class NegateContext(Expr_infix5Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix5Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(WdlV1Parser.NOT, 0)

        def expr_infix5(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix5Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNegate"):
                listener.enterNegate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNegate"):
                listener.exitNegate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNegate"):
                return visitor.visitNegate(self)
            else:
                return visitor.visitChildren(self)

    class Infix6Context(Expr_infix5Context):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_infix5Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_infix6(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_infix6Context, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInfix6"):
                listener.enterInfix6(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInfix6"):
                listener.exitInfix6(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInfix6"):
                return visitor.visitInfix6(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix5(self):

        localctx = WdlV1Parser.Expr_infix5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expr_infix5)
        self._la = 0  # Token type
        try:
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                localctx = WdlV1Parser.NegateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.match(WdlV1Parser.NOT)
                self.state = 327
                self.expr_infix5()
                pass
            elif token in [55, 56]:
                localctx = WdlV1Parser.UnarysignedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                _la = self._input.LA(1)
                if not (_la == 55 or _la == 56):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 329
                self.expr_infix5()
                pass
            elif token in [9, 30, 33, 34, 35, 36, 38, 40, 65, 66, 68]:
                localctx = WdlV1Parser.Infix6Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.expr_infix6()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_infix6Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_core(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_coreContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_infix6

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_infix6"):
                listener.enterExpr_infix6(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_infix6"):
                listener.exitExpr_infix6(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr_infix6"):
                return visitor.visitExpr_infix6(self)
            else:
                return visitor.visitChildren(self)

    def expr_infix6(self):

        localctx = WdlV1Parser.Expr_infix6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_expr_infix6)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.expr_core(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_member

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMember"):
                listener.enterMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMember"):
                listener.exitMember(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMember"):
                return visitor.visitMember(self)
            else:
                return visitor.visitChildren(self)

    def member(self):

        localctx = WdlV1Parser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(WdlV1Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_coreContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_core

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class Pair_literalContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(WdlV1Parser.LPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.ExprContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.ExprContext, i)

        def COMMA(self):
            return self.getToken(WdlV1Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(WdlV1Parser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPair_literal"):
                listener.enterPair_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPair_literal"):
                listener.exitPair_literal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPair_literal"):
                return visitor.visitPair_literal(self)
            else:
                return visitor.visitChildren(self)

    class PrimitivesContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primitive_literal(self):
            return self.getTypedRuleContext(WdlV1Parser.Primitive_literalContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitives"):
                listener.enterPrimitives(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitives"):
                listener.exitPrimitives(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitives"):
                return visitor.visitPrimitives(self)
            else:
                return visitor.visitChildren(self)

    class Left_nameContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLeft_name"):
                listener.enterLeft_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLeft_name"):
                listener.exitLeft_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLeft_name"):
                return visitor.visitLeft_name(self)
            else:
                return visitor.visitChildren(self)

    class AtContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_core(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_coreContext, 0)

        def LBRACK(self):
            return self.getToken(WdlV1Parser.LBRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def RBRACK(self):
            return self.getToken(WdlV1Parser.RBRACK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAt"):
                listener.enterAt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAt"):
                listener.exitAt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAt"):
                return visitor.visitAt(self)
            else:
                return visitor.visitChildren(self)

    class ApplyContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(WdlV1Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(WdlV1Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.ExprContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COMMA)
            else:
                return self.getToken(WdlV1Parser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterApply"):
                listener.enterApply(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitApply"):
                listener.exitApply(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitApply"):
                return visitor.visitApply(self)
            else:
                return visitor.visitChildren(self)

    class IfthenelseContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(WdlV1Parser.IF, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.ExprContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.ExprContext, i)

        def THEN(self):
            return self.getToken(WdlV1Parser.THEN, 0)

        def ELSE(self):
            return self.getToken(WdlV1Parser.ELSE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIfthenelse"):
                listener.enterIfthenelse(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIfthenelse"):
                listener.exitIfthenelse(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfthenelse"):
                return visitor.visitIfthenelse(self)
            else:
                return visitor.visitChildren(self)

    class Map_literalContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.ExprContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.ExprContext, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COLON)
            else:
                return self.getToken(WdlV1Parser.COLON, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COMMA)
            else:
                return self.getToken(WdlV1Parser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMap_literal"):
                listener.enterMap_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMap_literal"):
                listener.exitMap_literal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMap_literal"):
                return visitor.visitMap_literal(self)
            else:
                return visitor.visitChildren(self)

    class Get_nameContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr_core(self):
            return self.getTypedRuleContext(WdlV1Parser.Expr_coreContext, 0)

        def DOT(self):
            return self.getToken(WdlV1Parser.DOT, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGet_name"):
                listener.enterGet_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGet_name"):
                listener.exitGet_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGet_name"):
                return visitor.visitGet_name(self)
            else:
                return visitor.visitChildren(self)

    class Object_literalContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OBJECTLITERAL(self):
            return self.getToken(WdlV1Parser.OBJECTLITERAL, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def member(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.MemberContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.MemberContext, i)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COLON)
            else:
                return self.getToken(WdlV1Parser.COLON, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.ExprContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COMMA)
            else:
                return self.getToken(WdlV1Parser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObject_literal"):
                listener.enterObject_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObject_literal"):
                listener.exitObject_literal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObject_literal"):
                return visitor.visitObject_literal(self)
            else:
                return visitor.visitChildren(self)

    class Array_literalContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACK(self):
            return self.getToken(WdlV1Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(WdlV1Parser.RBRACK, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.ExprContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COMMA)
            else:
                return self.getToken(WdlV1Parser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArray_literal"):
                listener.enterArray_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArray_literal"):
                listener.exitArray_literal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArray_literal"):
                return visitor.visitArray_literal(self)
            else:
                return visitor.visitChildren(self)

    class Expression_groupContext(Expr_coreContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Expr_coreContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(WdlV1Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(WdlV1Parser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression_group"):
                listener.enterExpression_group(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression_group"):
                listener.exitExpression_group(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression_group"):
                return visitor.visitExpression_group(self)
            else:
                return visitor.visitChildren(self)

    def expr_core(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = WdlV1Parser.Expr_coreContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_expr_core, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
            if la_ == 1:
                localctx = WdlV1Parser.ApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 338
                self.match(WdlV1Parser.Identifier)
                self.state = 339
                self.match(WdlV1Parser.LPAREN)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 9)) & ~0x3F) == 0 and (
                    (1 << (_la - 9)) & 797348243215220737
                ) != 0:
                    self.state = 340
                    self.expr()
                    self.state = 345
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 341
                            self.match(WdlV1Parser.COMMA)
                            self.state = 342
                            self.expr()
                        self.state = 347
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)

                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 58:
                        self.state = 348
                        self.match(WdlV1Parser.COMMA)

                self.state = 353
                self.match(WdlV1Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = WdlV1Parser.Expression_groupContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 354
                self.match(WdlV1Parser.LPAREN)
                self.state = 355
                self.expr()
                self.state = 356
                self.match(WdlV1Parser.RPAREN)
                pass

            elif la_ == 3:
                localctx = WdlV1Parser.IfthenelseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 358
                self.match(WdlV1Parser.IF)
                self.state = 359
                self.expr()
                self.state = 360
                self.match(WdlV1Parser.THEN)
                self.state = 361
                self.expr()
                self.state = 362
                self.match(WdlV1Parser.ELSE)
                self.state = 363
                self.expr()
                pass

            elif la_ == 4:
                localctx = WdlV1Parser.Array_literalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 365
                self.match(WdlV1Parser.LBRACK)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 9)) & ~0x3F) == 0 and (
                    (1 << (_la - 9)) & 797348243215220737
                ) != 0:
                    self.state = 366
                    self.expr()
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 367
                            self.match(WdlV1Parser.COMMA)
                            self.state = 368
                            self.expr()
                        self.state = 373
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

                    self.state = 375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 58:
                        self.state = 374
                        self.match(WdlV1Parser.COMMA)

                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 382
                self.match(WdlV1Parser.RBRACK)
                pass

            elif la_ == 5:
                localctx = WdlV1Parser.Pair_literalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 383
                self.match(WdlV1Parser.LPAREN)
                self.state = 384
                self.expr()
                self.state = 385
                self.match(WdlV1Parser.COMMA)
                self.state = 386
                self.expr()
                self.state = 387
                self.match(WdlV1Parser.RPAREN)
                pass

            elif la_ == 6:
                localctx = WdlV1Parser.Map_literalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 389
                self.match(WdlV1Parser.LBRACE)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 9)) & ~0x3F) == 0 and (
                    (1 << (_la - 9)) & 797348243215220737
                ) != 0:
                    self.state = 390
                    self.expr()
                    self.state = 391
                    self.match(WdlV1Parser.COLON)
                    self.state = 392
                    self.expr()
                    self.state = 400
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 393
                            self.match(WdlV1Parser.COMMA)
                            self.state = 394
                            self.expr()
                            self.state = 395
                            self.match(WdlV1Parser.COLON)
                            self.state = 396
                            self.expr()
                        self.state = 402
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 58:
                        self.state = 403
                        self.match(WdlV1Parser.COMMA)

                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 411
                self.match(WdlV1Parser.RBRACE)
                pass

            elif la_ == 7:
                localctx = WdlV1Parser.Object_literalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 412
                self.match(WdlV1Parser.OBJECTLITERAL)
                self.state = 413
                self.match(WdlV1Parser.LBRACE)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 68:
                    self.state = 414
                    self.member()
                    self.state = 415
                    self.match(WdlV1Parser.COLON)
                    self.state = 416
                    self.expr()
                    self.state = 424
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 417
                            self.match(WdlV1Parser.COMMA)
                            self.state = 418
                            self.member()
                            self.state = 419
                            self.match(WdlV1Parser.COLON)
                            self.state = 420
                            self.expr()
                        self.state = 426
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

                    self.state = 428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 58:
                        self.state = 427
                        self.match(WdlV1Parser.COMMA)

                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 435
                self.match(WdlV1Parser.RBRACE)
                pass

            elif la_ == 8:
                localctx = WdlV1Parser.PrimitivesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 436
                self.primitive_literal()
                pass

            elif la_ == 9:
                localctx = WdlV1Parser.Left_nameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 437
                self.match(WdlV1Parser.Identifier)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 450
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 448
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
                    if la_ == 1:
                        localctx = WdlV1Parser.AtContext(
                            self,
                            WdlV1Parser.Expr_coreContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_core
                        )
                        self.state = 440
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 10)"
                            )
                        self.state = 441
                        self.match(WdlV1Parser.LBRACK)
                        self.state = 442
                        self.expr()
                        self.state = 443
                        self.match(WdlV1Parser.RBRACK)
                        pass

                    elif la_ == 2:
                        localctx = WdlV1Parser.Get_nameContext(
                            self,
                            WdlV1Parser.Expr_coreContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr_core
                        )
                        self.state = 445
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 9)"
                            )
                        self.state = 446
                        self.match(WdlV1Parser.DOT)
                        self.state = 447
                        self.match(WdlV1Parser.Identifier)
                        pass

                self.state = 452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VersionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(WdlV1Parser.VERSION, 0)

        def ReleaseVersion(self):
            return self.getToken(WdlV1Parser.ReleaseVersion, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_version

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersion"):
                listener.enterVersion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersion"):
                listener.exitVersion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVersion"):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)

    def version(self):

        localctx = WdlV1Parser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(WdlV1Parser.VERSION)
            self.state = 454
            self.match(WdlV1Parser.ReleaseVersion)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_aliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(WdlV1Parser.ALIAS, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.Identifier)
            else:
                return self.getToken(WdlV1Parser.Identifier, i)

        def AS(self):
            return self.getToken(WdlV1Parser.AS, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_import_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_alias"):
                listener.enterImport_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_alias"):
                listener.exitImport_alias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_alias"):
                return visitor.visitImport_alias(self)
            else:
                return visitor.visitChildren(self)

    def import_alias(self):

        localctx = WdlV1Parser.Import_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(WdlV1Parser.ALIAS)
            self.state = 457
            self.match(WdlV1Parser.Identifier)
            self.state = 458
            self.match(WdlV1Parser.AS)
            self.state = 459
            self.match(WdlV1Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_asContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(WdlV1Parser.AS, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_import_as

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_as"):
                listener.enterImport_as(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_as"):
                listener.exitImport_as(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_as"):
                return visitor.visitImport_as(self)
            else:
                return visitor.visitChildren(self)

    def import_as(self):

        localctx = WdlV1Parser.Import_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(WdlV1Parser.AS)
            self.state = 462
            self.match(WdlV1Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_docContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(WdlV1Parser.IMPORT, 0)

        def string(self):
            return self.getTypedRuleContext(WdlV1Parser.StringContext, 0)

        def import_as(self):
            return self.getTypedRuleContext(WdlV1Parser.Import_asContext, 0)

        def import_alias(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Import_aliasContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Import_aliasContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_import_doc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImport_doc"):
                listener.enterImport_doc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImport_doc"):
                listener.exitImport_doc(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_doc"):
                return visitor.visitImport_doc(self)
            else:
                return visitor.visitChildren(self)

    def import_doc(self):

        localctx = WdlV1Parser.Import_docContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_doc)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(WdlV1Parser.IMPORT)
            self.state = 465
            self.string()
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 13:
                self.state = 466
                self.import_as()

            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 12:
                self.state = 469
                self.import_alias()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(WdlV1Parser.STRUCT, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def unbound_decls(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Unbound_declsContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Unbound_declsContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_struct

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStruct"):
                listener.enterStruct(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStruct"):
                listener.exitStruct(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStruct"):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)

    def struct(self):

        localctx = WdlV1Parser.StructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_struct)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(WdlV1Parser.STRUCT)
            self.state = 476
            self.match(WdlV1Parser.Identifier)
            self.state = 477
            self.match(WdlV1Parser.LBRACE)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 21)) & ~0x3F) == 0 and (
                (1 << (_la - 21)) & 140737488355839
            ) != 0:
                self.state = 478
                self.unbound_decls()
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 484
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_valueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetaNull(self):
            return self.getToken(WdlV1Parser.MetaNull, 0)

        def MetaBool(self):
            return self.getToken(WdlV1Parser.MetaBool, 0)

        def MetaInt(self):
            return self.getToken(WdlV1Parser.MetaInt, 0)

        def MetaFloat(self):
            return self.getToken(WdlV1Parser.MetaFloat, 0)

        def meta_string(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_stringContext, 0)

        def meta_object(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_objectContext, 0)

        def meta_array(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_arrayContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_value"):
                listener.enterMeta_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_value"):
                listener.exitMeta_value(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_value"):
                return visitor.visitMeta_value(self)
            else:
                return visitor.visitChildren(self)

    def meta_value(self):

        localctx = WdlV1Parser.Meta_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_meta_value)
        try:
            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.match(WdlV1Parser.MetaNull)
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.match(WdlV1Parser.MetaBool)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 3)
                self.state = 488
                self.match(WdlV1Parser.MetaInt)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.match(WdlV1Parser.MetaFloat)
                pass
            elif token in [91, 92]:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                self.meta_string()
                pass
            elif token in [93, 96]:
                self.enterOuterAlt(localctx, 6)
                self.state = 491
                self.meta_object()
                pass
            elif token in [94, 95]:
                self.enterOuterAlt(localctx, 7)
                self.state = 492
                self.meta_array()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_string_partContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetaEscStringPart(self):
            return self.getToken(WdlV1Parser.MetaEscStringPart, 0)

        def MetaStringPart(self):
            return self.getToken(WdlV1Parser.MetaStringPart, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_string_part

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_string_part"):
                listener.enterMeta_string_part(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_string_part"):
                listener.exitMeta_string_part(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_string_part"):
                return visitor.visitMeta_string_part(self)
            else:
                return visitor.visitChildren(self)

    def meta_string_part(self):

        localctx = WdlV1Parser.Meta_string_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_meta_string_part)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            _la = self._input.LA(1)
            if not (_la == 98 or _la == 99):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_string_partsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meta_string_part(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Meta_string_partContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Meta_string_partContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_string_parts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_string_parts"):
                listener.enterMeta_string_parts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_string_parts"):
                listener.exitMeta_string_parts(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_string_parts"):
                return visitor.visitMeta_string_parts(self)
            else:
                return visitor.visitChildren(self)

    def meta_string_parts(self):

        localctx = WdlV1Parser.Meta_string_partsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_meta_string_parts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 98 or _la == 99:
                self.state = 497
                self.meta_string_part()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_stringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_string

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class Meta_squote_stringContext(Meta_stringContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Meta_stringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MetaSquote(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.MetaSquote)
            else:
                return self.getToken(WdlV1Parser.MetaSquote, i)

        def meta_string_parts(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_string_partsContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_squote_string"):
                listener.enterMeta_squote_string(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_squote_string"):
                listener.exitMeta_squote_string(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_squote_string"):
                return visitor.visitMeta_squote_string(self)
            else:
                return visitor.visitChildren(self)

    class Meta_dquote_stringContext(Meta_stringContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Meta_stringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MetaDquote(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.MetaDquote)
            else:
                return self.getToken(WdlV1Parser.MetaDquote, i)

        def meta_string_parts(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_string_partsContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_dquote_string"):
                listener.enterMeta_dquote_string(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_dquote_string"):
                listener.exitMeta_dquote_string(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_dquote_string"):
                return visitor.visitMeta_dquote_string(self)
            else:
                return visitor.visitChildren(self)

    def meta_string(self):

        localctx = WdlV1Parser.Meta_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_meta_string)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                localctx = WdlV1Parser.Meta_dquote_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(WdlV1Parser.MetaDquote)
                self.state = 504
                self.meta_string_parts()
                self.state = 505
                self.match(WdlV1Parser.MetaDquote)
                pass
            elif token in [91]:
                localctx = WdlV1Parser.Meta_squote_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.match(WdlV1Parser.MetaSquote)
                self.state = 508
                self.meta_string_parts()
                self.state = 509
                self.match(WdlV1Parser.MetaSquote)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_arrayContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetaEmptyArray(self):
            return self.getToken(WdlV1Parser.MetaEmptyArray, 0)

        def MetaLbrack(self):
            return self.getToken(WdlV1Parser.MetaLbrack, 0)

        def meta_value(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Meta_valueContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Meta_valueContext, i)

        def MetaArrayCommaRbrack(self):
            return self.getToken(WdlV1Parser.MetaArrayCommaRbrack, 0)

        def MetaRbrack(self):
            return self.getToken(WdlV1Parser.MetaRbrack, 0)

        def MetaArrayComma(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.MetaArrayComma)
            else:
                return self.getToken(WdlV1Parser.MetaArrayComma, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_array

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_array"):
                listener.enterMeta_array(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_array"):
                listener.exitMeta_array(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_array"):
                return visitor.visitMeta_array(self)
            else:
                return visitor.visitChildren(self)

    def meta_array(self):

        localctx = WdlV1Parser.Meta_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_meta_array)
        self._la = 0  # Token type
        try:
            self.state = 525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.match(WdlV1Parser.MetaEmptyArray)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.match(WdlV1Parser.MetaLbrack)
                self.state = 515
                self.meta_value()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 102:
                    self.state = 516
                    self.match(WdlV1Parser.MetaArrayComma)
                    self.state = 517
                    self.meta_value()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 523
                _la = self._input.LA(1)
                if not (_la == 101 or _la == 103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_objectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetaEmptyObject(self):
            return self.getToken(WdlV1Parser.MetaEmptyObject, 0)

        def MetaLbrace(self):
            return self.getToken(WdlV1Parser.MetaLbrace, 0)

        def meta_object_kv(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Meta_object_kvContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Meta_object_kvContext, i)

        def MetaObjectCommaRbrace(self):
            return self.getToken(WdlV1Parser.MetaObjectCommaRbrace, 0)

        def MetaRbrace(self):
            return self.getToken(WdlV1Parser.MetaRbrace, 0)

        def MetaObjectComma(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.MetaObjectComma)
            else:
                return self.getToken(WdlV1Parser.MetaObjectComma, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_object

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_object"):
                listener.enterMeta_object(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_object"):
                listener.exitMeta_object(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_object"):
                return visitor.visitMeta_object(self)
            else:
                return visitor.visitChildren(self)

    def meta_object(self):

        localctx = WdlV1Parser.Meta_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_meta_object)
        self._la = 0  # Token type
        try:
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(WdlV1Parser.MetaEmptyObject)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 528
                self.match(WdlV1Parser.MetaLbrace)
                self.state = 529
                self.meta_object_kv()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 109:
                    self.state = 530
                    self.match(WdlV1Parser.MetaObjectComma)
                    self.state = 531
                    self.meta_object_kv()
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 537
                _la = self._input.LA(1)
                if not (_la == 108 or _la == 110):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_object_kvContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetaObjectIdentifier(self):
            return self.getToken(WdlV1Parser.MetaObjectIdentifier, 0)

        def MetaObjectColon(self):
            return self.getToken(WdlV1Parser.MetaObjectColon, 0)

        def meta_value(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_valueContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_object_kv

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_object_kv"):
                listener.enterMeta_object_kv(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_object_kv"):
                listener.exitMeta_object_kv(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_object_kv"):
                return visitor.visitMeta_object_kv(self)
            else:
                return visitor.visitChildren(self)

    def meta_object_kv(self):

        localctx = WdlV1Parser.Meta_object_kvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_meta_object_kv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(WdlV1Parser.MetaObjectIdentifier)
            self.state = 542
            self.match(WdlV1Parser.MetaObjectColon)
            self.state = 543
            self.meta_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Meta_kvContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetaIdentifier(self):
            return self.getToken(WdlV1Parser.MetaIdentifier, 0)

        def MetaColon(self):
            return self.getToken(WdlV1Parser.MetaColon, 0)

        def meta_value(self):
            return self.getTypedRuleContext(WdlV1Parser.Meta_valueContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta_kv

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_kv"):
                listener.enterMeta_kv(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_kv"):
                listener.exitMeta_kv(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_kv"):
                return visitor.visitMeta_kv(self)
            else:
                return visitor.visitChildren(self)

    def meta_kv(self):

        localctx = WdlV1Parser.Meta_kvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_meta_kv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(WdlV1Parser.MetaIdentifier)
            self.state = 546
            self.match(WdlV1Parser.MetaColon)
            self.state = 547
            self.meta_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_metaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERMETA(self):
            return self.getToken(WdlV1Parser.PARAMETERMETA, 0)

        def BeginMeta(self):
            return self.getToken(WdlV1Parser.BeginMeta, 0)

        def EndMeta(self):
            return self.getToken(WdlV1Parser.EndMeta, 0)

        def meta_kv(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Meta_kvContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Meta_kvContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_parameter_meta

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameter_meta"):
                listener.enterParameter_meta(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameter_meta"):
                listener.exitParameter_meta(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameter_meta"):
                return visitor.visitParameter_meta(self)
            else:
                return visitor.visitChildren(self)

    def parameter_meta(self):

        localctx = WdlV1Parser.Parameter_metaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_parameter_meta)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(WdlV1Parser.PARAMETERMETA)
            self.state = 550
            self.match(WdlV1Parser.BeginMeta)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 82:
                self.state = 551
                self.meta_kv()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.match(WdlV1Parser.EndMeta)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def META(self):
            return self.getToken(WdlV1Parser.META, 0)

        def BeginMeta(self):
            return self.getToken(WdlV1Parser.BeginMeta, 0)

        def EndMeta(self):
            return self.getToken(WdlV1Parser.EndMeta, 0)

        def meta_kv(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Meta_kvContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Meta_kvContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_meta

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta"):
                listener.enterMeta(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta"):
                listener.exitMeta(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta"):
                return visitor.visitMeta(self)
            else:
                return visitor.visitChildren(self)

    def meta(self):

        localctx = WdlV1Parser.MetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_meta)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(WdlV1Parser.META)
            self.state = 560
            self.match(WdlV1Parser.BeginMeta)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 82:
                self.state = 561
                self.meta_kv()
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self.match(WdlV1Parser.EndMeta)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_runtime_kvContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def COLON(self):
            return self.getToken(WdlV1Parser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_runtime_kv

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_runtime_kv"):
                listener.enterTask_runtime_kv(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_runtime_kv"):
                listener.exitTask_runtime_kv(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_runtime_kv"):
                return visitor.visitTask_runtime_kv(self)
            else:
                return visitor.visitChildren(self)

    def task_runtime_kv(self):

        localctx = WdlV1Parser.Task_runtime_kvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_task_runtime_kv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(WdlV1Parser.Identifier)
            self.state = 570
            self.match(WdlV1Parser.COLON)
            self.state = 571
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_runtimeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNTIME(self):
            return self.getToken(WdlV1Parser.RUNTIME, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def task_runtime_kv(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Task_runtime_kvContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Task_runtime_kvContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_runtime

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_runtime"):
                listener.enterTask_runtime(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_runtime"):
                listener.exitTask_runtime(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_runtime"):
                return visitor.visitTask_runtime(self)
            else:
                return visitor.visitChildren(self)

    def task_runtime(self):

        localctx = WdlV1Parser.Task_runtimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_task_runtime)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(WdlV1Parser.RUNTIME)
            self.state = 574
            self.match(WdlV1Parser.LBRACE)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 68:
                self.state = 575
                self.task_runtime_kv()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 581
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_inputContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(WdlV1Parser.INPUT, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def any_decls(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Any_declsContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Any_declsContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_input

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_input"):
                listener.enterTask_input(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_input"):
                listener.exitTask_input(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_input"):
                return visitor.visitTask_input(self)
            else:
                return visitor.visitChildren(self)

    def task_input(self):

        localctx = WdlV1Parser.Task_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_task_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(WdlV1Parser.INPUT)
            self.state = 584
            self.match(WdlV1Parser.LBRACE)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 21)) & ~0x3F) == 0 and (
                (1 << (_la - 21)) & 140737488355839
            ) != 0:
                self.state = 585
                self.any_decls()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 591
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_outputContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(WdlV1Parser.OUTPUT, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def bound_decls(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Bound_declsContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Bound_declsContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_output

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_output"):
                listener.enterTask_output(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_output"):
                listener.exitTask_output(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_output"):
                return visitor.visitTask_output(self)
            else:
                return visitor.visitChildren(self)

    def task_output(self):

        localctx = WdlV1Parser.Task_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_task_output)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(WdlV1Parser.OUTPUT)
            self.state = 594
            self.match(WdlV1Parser.LBRACE)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 21)) & ~0x3F) == 0 and (
                (1 << (_la - 21)) & 140737488355839
            ) != 0:
                self.state = 595
                self.bound_decls()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_command_string_partsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CommandStringPart(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.CommandStringPart)
            else:
                return self.getToken(WdlV1Parser.CommandStringPart, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_command_string_parts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_command_string_parts"):
                listener.enterTask_command_string_parts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_command_string_parts"):
                listener.exitTask_command_string_parts(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_command_string_parts"):
                return visitor.visitTask_command_string_parts(self)
            else:
                return visitor.visitChildren(self)

    def task_command_string_parts(self):

        localctx = WdlV1Parser.Task_command_string_partsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 92, self.RULE_task_command_string_parts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 76:
                self.state = 603
                self.match(WdlV1Parser.CommandStringPart)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_command_expr_partContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringCommandStart(self):
            return self.getToken(WdlV1Parser.StringCommandStart, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def expression_placeholder_option(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.Expression_placeholder_optionContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.Expression_placeholder_optionContext, i
                )

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_command_expr_part

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_command_expr_part"):
                listener.enterTask_command_expr_part(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_command_expr_part"):
                listener.exitTask_command_expr_part(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_command_expr_part"):
                return visitor.visitTask_command_expr_part(self)
            else:
                return visitor.visitChildren(self)

    def task_command_expr_part(self):

        localctx = WdlV1Parser.Task_command_expr_partContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 94, self.RULE_task_command_expr_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(WdlV1Parser.StringCommandStart)
            self.state = 613
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 51, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 610
                    self.expression_placeholder_option()
                self.state = 615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 51, self._ctx)

            self.state = 616
            self.expr()
            self.state = 617
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_command_expr_with_stringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def task_command_expr_part(self):
            return self.getTypedRuleContext(
                WdlV1Parser.Task_command_expr_partContext, 0
            )

        def task_command_string_parts(self):
            return self.getTypedRuleContext(
                WdlV1Parser.Task_command_string_partsContext, 0
            )

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_command_expr_with_string

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_command_expr_with_string"):
                listener.enterTask_command_expr_with_string(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_command_expr_with_string"):
                listener.exitTask_command_expr_with_string(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_command_expr_with_string"):
                return visitor.visitTask_command_expr_with_string(self)
            else:
                return visitor.visitChildren(self)

    def task_command_expr_with_string(self):

        localctx = WdlV1Parser.Task_command_expr_with_stringContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 96, self.RULE_task_command_expr_with_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.task_command_expr_part()
            self.state = 620
            self.task_command_string_parts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_commandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMAND(self):
            return self.getToken(WdlV1Parser.COMMAND, 0)

        def BeginLBrace(self):
            return self.getToken(WdlV1Parser.BeginLBrace, 0)

        def task_command_string_parts(self):
            return self.getTypedRuleContext(
                WdlV1Parser.Task_command_string_partsContext, 0
            )

        def EndCommand(self):
            return self.getToken(WdlV1Parser.EndCommand, 0)

        def task_command_expr_with_string(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.Task_command_expr_with_stringContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.Task_command_expr_with_stringContext, i
                )

        def BeginHereDoc(self):
            return self.getToken(WdlV1Parser.BeginHereDoc, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_command

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_command"):
                listener.enterTask_command(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_command"):
                listener.exitTask_command(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_command"):
                return visitor.visitTask_command(self)
            else:
                return visitor.visitChildren(self)

    def task_command(self):

        localctx = WdlV1Parser.Task_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_task_command)
        self._la = 0  # Token type
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.match(WdlV1Parser.COMMAND)
                self.state = 623
                self.match(WdlV1Parser.BeginLBrace)
                self.state = 624
                self.task_command_string_parts()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 74:
                    self.state = 625
                    self.task_command_expr_with_string()
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 631
                self.match(WdlV1Parser.EndCommand)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.match(WdlV1Parser.COMMAND)
                self.state = 634
                self.match(WdlV1Parser.BeginHereDoc)
                self.state = 635
                self.task_command_string_parts()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 74:
                    self.state = 636
                    self.task_command_expr_with_string()
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 642
                self.match(WdlV1Parser.EndCommand)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Task_elementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def task_input(self):
            return self.getTypedRuleContext(WdlV1Parser.Task_inputContext, 0)

        def task_output(self):
            return self.getTypedRuleContext(WdlV1Parser.Task_outputContext, 0)

        def task_command(self):
            return self.getTypedRuleContext(WdlV1Parser.Task_commandContext, 0)

        def task_runtime(self):
            return self.getTypedRuleContext(WdlV1Parser.Task_runtimeContext, 0)

        def bound_decls(self):
            return self.getTypedRuleContext(WdlV1Parser.Bound_declsContext, 0)

        def parameter_meta(self):
            return self.getTypedRuleContext(WdlV1Parser.Parameter_metaContext, 0)

        def meta(self):
            return self.getTypedRuleContext(WdlV1Parser.MetaContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask_element"):
                listener.enterTask_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask_element"):
                listener.exitTask_element(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask_element"):
                return visitor.visitTask_element(self)
            else:
                return visitor.visitChildren(self)

    def task_element(self):

        localctx = WdlV1Parser.Task_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_task_element)
        try:
            self.state = 653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.task_input()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.task_output()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 648
                self.task_command()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 649
                self.task_runtime()
                pass
            elif token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 68]:
                self.enterOuterAlt(localctx, 5)
                self.state = 650
                self.bound_decls()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 6)
                self.state = 651
                self.parameter_meta()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 652
                self.meta()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TaskContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TASK(self):
            return self.getToken(WdlV1Parser.TASK, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def task_element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Task_elementContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Task_elementContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_task

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTask"):
                listener.enterTask(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTask"):
                listener.exitTask(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTask"):
                return visitor.visitTask(self)
            else:
                return visitor.visitChildren(self)

    def task(self):

        localctx = WdlV1Parser.TaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_task)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(WdlV1Parser.TASK)
            self.state = 656
            self.match(WdlV1Parser.Identifier)
            self.state = 657
            self.match(WdlV1Parser.LBRACE)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 658
                self.task_element()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 15)) & ~0x3F) == 0
                        and ((1 << (_la - 15)) & 9007199254773759) != 0
                    )
                ):
                    break

            self.state = 663
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inner_workflow_elementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bound_decls(self):
            return self.getTypedRuleContext(WdlV1Parser.Bound_declsContext, 0)

        def call(self):
            return self.getTypedRuleContext(WdlV1Parser.CallContext, 0)

        def scatter(self):
            return self.getTypedRuleContext(WdlV1Parser.ScatterContext, 0)

        def conditional(self):
            return self.getTypedRuleContext(WdlV1Parser.ConditionalContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_inner_workflow_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInner_workflow_element"):
                listener.enterInner_workflow_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInner_workflow_element"):
                listener.exitInner_workflow_element(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInner_workflow_element"):
                return visitor.visitInner_workflow_element(self)
            else:
                return visitor.visitChildren(self)

    def inner_workflow_element(self):

        localctx = WdlV1Parser.Inner_workflow_elementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 104, self.RULE_inner_workflow_element)
        try:
            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.bound_decls()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.call()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self.scatter()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 4)
                self.state = 668
                self.conditional()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_aliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(WdlV1Parser.AS, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_call_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall_alias"):
                listener.enterCall_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall_alias"):
                listener.exitCall_alias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall_alias"):
                return visitor.visitCall_alias(self)
            else:
                return visitor.visitChildren(self)

    def call_alias(self):

        localctx = WdlV1Parser.Call_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_call_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(WdlV1Parser.AS)
            self.state = 672
            self.match(WdlV1Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_inputContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def EQUAL(self):
            return self.getToken(WdlV1Parser.EQUAL, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_call_input

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall_input"):
                listener.enterCall_input(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall_input"):
                listener.exitCall_input(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall_input"):
                return visitor.visitCall_input(self)
            else:
                return visitor.visitChildren(self)

    def call_input(self):

        localctx = WdlV1Parser.Call_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_call_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(WdlV1Parser.Identifier)
            self.state = 675
            self.match(WdlV1Parser.EQUAL)
            self.state = 676
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_inputsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(WdlV1Parser.INPUT, 0)

        def COLON(self):
            return self.getToken(WdlV1Parser.COLON, 0)

        def call_input(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Call_inputContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Call_inputContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.COMMA)
            else:
                return self.getToken(WdlV1Parser.COMMA, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_call_inputs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall_inputs"):
                listener.enterCall_inputs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall_inputs"):
                listener.exitCall_inputs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall_inputs"):
                return visitor.visitCall_inputs(self)
            else:
                return visitor.visitChildren(self)

    def call_inputs(self):

        localctx = WdlV1Parser.Call_inputsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_call_inputs)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(WdlV1Parser.INPUT)
            self.state = 679
            self.match(WdlV1Parser.COLON)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 68:
                self.state = 680
                self.call_input()
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 58, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 681
                        self.match(WdlV1Parser.COMMA)
                        self.state = 682
                        self.call_input()
                    self.state = 687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 58, self._ctx)

                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 58:
                    self.state = 688
                    self.match(WdlV1Parser.COMMA)

                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_bodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def call_inputs(self):
            return self.getTypedRuleContext(WdlV1Parser.Call_inputsContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_call_body

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall_body"):
                listener.enterCall_body(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall_body"):
                listener.exitCall_body(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall_body"):
                return visitor.visitCall_body(self)
            else:
                return visitor.visitChildren(self)

    def call_body(self):

        localctx = WdlV1Parser.Call_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_call_body)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(WdlV1Parser.LBRACE)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 15:
                self.state = 697
                self.call_inputs()

            self.state = 700
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.Identifier)
            else:
                return self.getToken(WdlV1Parser.Identifier, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(WdlV1Parser.DOT)
            else:
                return self.getToken(WdlV1Parser.DOT, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_call_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall_name"):
                listener.enterCall_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall_name"):
                listener.exitCall_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall_name"):
                return visitor.visitCall_name(self)
            else:
                return visitor.visitChildren(self)

    def call_name(self):

        localctx = WdlV1Parser.Call_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_call_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(WdlV1Parser.Identifier)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 60:
                self.state = 703
                self.match(WdlV1Parser.DOT)
                self.state = 704
                self.match(WdlV1Parser.Identifier)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(WdlV1Parser.CALL, 0)

        def call_name(self):
            return self.getTypedRuleContext(WdlV1Parser.Call_nameContext, 0)

        def call_alias(self):
            return self.getTypedRuleContext(WdlV1Parser.Call_aliasContext, 0)

        def call_body(self):
            return self.getTypedRuleContext(WdlV1Parser.Call_bodyContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall"):
                listener.enterCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall"):
                listener.exitCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self):

        localctx = WdlV1Parser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_call)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(WdlV1Parser.CALL)
            self.state = 711
            self.call_name()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 13:
                self.state = 712
                self.call_alias()

            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 38:
                self.state = 715
                self.call_body()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScatterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCATTER(self):
            return self.getToken(WdlV1Parser.SCATTER, 0)

        def LPAREN(self):
            return self.getToken(WdlV1Parser.LPAREN, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def In(self):
            return self.getToken(WdlV1Parser.In, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(WdlV1Parser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def inner_workflow_element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.Inner_workflow_elementContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.Inner_workflow_elementContext, i
                )

        def getRuleIndex(self):
            return WdlV1Parser.RULE_scatter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterScatter"):
                listener.enterScatter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitScatter"):
                listener.exitScatter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScatter"):
                return visitor.visitScatter(self)
            else:
                return visitor.visitChildren(self)

    def scatter(self):

        localctx = WdlV1Parser.ScatterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_scatter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(WdlV1Parser.SCATTER)
            self.state = 719
            self.match(WdlV1Parser.LPAREN)
            self.state = 720
            self.match(WdlV1Parser.Identifier)
            self.state = 721
            self.match(WdlV1Parser.In)
            self.state = 722
            self.expr()
            self.state = 723
            self.match(WdlV1Parser.RPAREN)
            self.state = 724
            self.match(WdlV1Parser.LBRACE)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 7)) & ~0x3F) == 0 and (
                (1 << (_la - 7)) & 2305843009222066183
            ) != 0:
                self.state = 725
                self.inner_workflow_element()
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 731
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WdlV1Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(WdlV1Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(WdlV1Parser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def inner_workflow_element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    WdlV1Parser.Inner_workflow_elementContext
                )
            else:
                return self.getTypedRuleContext(
                    WdlV1Parser.Inner_workflow_elementContext, i
                )

        def getRuleIndex(self):
            return WdlV1Parser.RULE_conditional

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditional"):
                listener.enterConditional(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditional"):
                listener.exitConditional(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditional"):
                return visitor.visitConditional(self)
            else:
                return visitor.visitChildren(self)

    def conditional(self):

        localctx = WdlV1Parser.ConditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_conditional)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(WdlV1Parser.IF)
            self.state = 734
            self.match(WdlV1Parser.LPAREN)
            self.state = 735
            self.expr()
            self.state = 736
            self.match(WdlV1Parser.RPAREN)
            self.state = 737
            self.match(WdlV1Parser.LBRACE)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 7)) & ~0x3F) == 0 and (
                (1 << (_la - 7)) & 2305843009222066183
            ) != 0:
                self.state = 738
                self.inner_workflow_element()
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Workflow_inputContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(WdlV1Parser.INPUT, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def any_decls(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Any_declsContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Any_declsContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_workflow_input

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWorkflow_input"):
                listener.enterWorkflow_input(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWorkflow_input"):
                listener.exitWorkflow_input(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWorkflow_input"):
                return visitor.visitWorkflow_input(self)
            else:
                return visitor.visitChildren(self)

    def workflow_input(self):

        localctx = WdlV1Parser.Workflow_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_workflow_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(WdlV1Parser.INPUT)
            self.state = 747
            self.match(WdlV1Parser.LBRACE)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 21)) & ~0x3F) == 0 and (
                (1 << (_la - 21)) & 140737488355839
            ) != 0:
                self.state = 748
                self.any_decls()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 754
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Workflow_outputContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(WdlV1Parser.OUTPUT, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def bound_decls(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Bound_declsContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Bound_declsContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_workflow_output

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWorkflow_output"):
                listener.enterWorkflow_output(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWorkflow_output"):
                listener.exitWorkflow_output(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWorkflow_output"):
                return visitor.visitWorkflow_output(self)
            else:
                return visitor.visitChildren(self)

    def workflow_output(self):

        localctx = WdlV1Parser.Workflow_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_workflow_output)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(WdlV1Parser.OUTPUT)
            self.state = 757
            self.match(WdlV1Parser.LBRACE)
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 21)) & ~0x3F) == 0 and (
                (1 << (_la - 21)) & 140737488355839
            ) != 0:
                self.state = 758
                self.bound_decls()
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 764
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Workflow_elementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return WdlV1Parser.RULE_workflow_element

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class OutputContext(Workflow_elementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Workflow_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def workflow_output(self):
            return self.getTypedRuleContext(WdlV1Parser.Workflow_outputContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOutput"):
                listener.enterOutput(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOutput"):
                listener.exitOutput(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOutput"):
                return visitor.visitOutput(self)
            else:
                return visitor.visitChildren(self)

    class InputContext(Workflow_elementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Workflow_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def workflow_input(self):
            return self.getTypedRuleContext(WdlV1Parser.Workflow_inputContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInput"):
                listener.enterInput(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInput"):
                listener.exitInput(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInput"):
                return visitor.visitInput(self)
            else:
                return visitor.visitChildren(self)

    class Parameter_meta_elementContext(Workflow_elementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Workflow_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameter_meta(self):
            return self.getTypedRuleContext(WdlV1Parser.Parameter_metaContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameter_meta_element"):
                listener.enterParameter_meta_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameter_meta_element"):
                listener.exitParameter_meta_element(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameter_meta_element"):
                return visitor.visitParameter_meta_element(self)
            else:
                return visitor.visitChildren(self)

    class Meta_elementContext(Workflow_elementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Workflow_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def meta(self):
            return self.getTypedRuleContext(WdlV1Parser.MetaContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeta_element"):
                listener.enterMeta_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeta_element"):
                listener.exitMeta_element(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMeta_element"):
                return visitor.visitMeta_element(self)
            else:
                return visitor.visitChildren(self)

    class Inner_elementContext(Workflow_elementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a WdlV1Parser.Workflow_elementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inner_workflow_element(self):
            return self.getTypedRuleContext(
                WdlV1Parser.Inner_workflow_elementContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInner_element"):
                listener.enterInner_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInner_element"):
                listener.exitInner_element(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInner_element"):
                return visitor.visitInner_element(self)
            else:
                return visitor.visitChildren(self)

    def workflow_element(self):

        localctx = WdlV1Parser.Workflow_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_workflow_element)
        try:
            self.state = 771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                localctx = WdlV1Parser.InputContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.workflow_input()
                pass
            elif token in [16]:
                localctx = WdlV1Parser.OutputContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 767
                self.workflow_output()
                pass
            elif token in [7, 8, 9, 21, 22, 23, 24, 25, 26, 27, 28, 29, 68]:
                localctx = WdlV1Parser.Inner_elementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.inner_workflow_element()
                pass
            elif token in [17]:
                localctx = WdlV1Parser.Parameter_meta_elementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                self.parameter_meta()
                pass
            elif token in [18]:
                localctx = WdlV1Parser.Meta_elementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 770
                self.meta()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WorkflowContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WORKFLOW(self):
            return self.getToken(WdlV1Parser.WORKFLOW, 0)

        def Identifier(self):
            return self.getToken(WdlV1Parser.Identifier, 0)

        def LBRACE(self):
            return self.getToken(WdlV1Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(WdlV1Parser.RBRACE, 0)

        def workflow_element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Workflow_elementContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Workflow_elementContext, i)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_workflow

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWorkflow"):
                listener.enterWorkflow(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWorkflow"):
                listener.exitWorkflow(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWorkflow"):
                return visitor.visitWorkflow(self)
            else:
                return visitor.visitChildren(self)

    def workflow(self):

        localctx = WdlV1Parser.WorkflowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_workflow)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(WdlV1Parser.WORKFLOW)
            self.state = 774
            self.match(WdlV1Parser.Identifier)
            self.state = 775
            self.match(WdlV1Parser.LBRACE)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 7)) & ~0x3F) == 0 and (
                (1 << (_la - 7)) & 2305843009222070023
            ) != 0:
                self.state = 776
                self.workflow_element()
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self.match(WdlV1Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Document_elementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_doc(self):
            return self.getTypedRuleContext(WdlV1Parser.Import_docContext, 0)

        def struct(self):
            return self.getTypedRuleContext(WdlV1Parser.StructContext, 0)

        def task(self):
            return self.getTypedRuleContext(WdlV1Parser.TaskContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_document_element

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDocument_element"):
                listener.enterDocument_element(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDocument_element"):
                listener.exitDocument_element(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDocument_element"):
                return visitor.visitDocument_element(self)
            else:
                return visitor.visitChildren(self)

    def document_element(self):

        localctx = WdlV1Parser.Document_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_document_element)
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.import_doc()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.struct()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                self.task()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DocumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(WdlV1Parser.VersionContext, 0)

        def EOF(self):
            return self.getToken(WdlV1Parser.EOF, 0)

        def document_element(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(WdlV1Parser.Document_elementContext)
            else:
                return self.getTypedRuleContext(WdlV1Parser.Document_elementContext, i)

        def workflow(self):
            return self.getTypedRuleContext(WdlV1Parser.WorkflowContext, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_document

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDocument"):
                listener.enterDocument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDocument"):
                listener.exitDocument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDocument"):
                return visitor.visitDocument(self)
            else:
                return visitor.visitChildren(self)

    def document(self):

        localctx = WdlV1Parser.DocumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_document)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.version()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and ((1 << _la) & 104) != 0:
                self.state = 790
                self.document_element()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 4:
                self.state = 796
                self.workflow()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 104) != 0:
                    self.state = 797
                    self.document_element()
                    self.state = 802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 805
            self.match(WdlV1Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_documentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wdl_type(self):
            return self.getTypedRuleContext(WdlV1Parser.Wdl_typeContext, 0)

        def EOF(self):
            return self.getToken(WdlV1Parser.EOF, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_type_document

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_document"):
                listener.enterType_document(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_document"):
                listener.exitType_document(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_document"):
                return visitor.visitType_document(self)
            else:
                return visitor.visitChildren(self)

    def type_document(self):

        localctx = WdlV1Parser.Type_documentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_type_document)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.wdl_type()
            self.state = 808
            self.match(WdlV1Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_documentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WdlV1Parser.ExprContext, 0)

        def EOF(self):
            return self.getToken(WdlV1Parser.EOF, 0)

        def getRuleIndex(self):
            return WdlV1Parser.RULE_expr_document

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr_document"):
                listener.enterExpr_document(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr_document"):
                listener.exitExpr_document(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr_document"):
                return visitor.visitExpr_document(self)
            else:
                return visitor.visitChildren(self)

    def expr_document(self):

        localctx = WdlV1Parser.Expr_documentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_expr_document)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.expr()
            self.state = 811
            self.match(WdlV1Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.expr_infix0_sempred
        self._predicates[19] = self.expr_infix1_sempred
        self._predicates[20] = self.expr_infix2_sempred
        self._predicates[21] = self.expr_infix3_sempred
        self._predicates[22] = self.expr_infix4_sempred
        self._predicates[26] = self.expr_core_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_infix0_sempred(self, localctx: Expr_infix0Context, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

    def expr_infix1_sempred(self, localctx: Expr_infix1Context, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 2)

    def expr_infix2_sempred(self, localctx: Expr_infix2Context, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 7)

        if predIndex == 3:
            return self.precpred(self._ctx, 6)

        if predIndex == 4:
            return self.precpred(self._ctx, 5)

        if predIndex == 5:
            return self.precpred(self._ctx, 4)

        if predIndex == 6:
            return self.precpred(self._ctx, 3)

        if predIndex == 7:
            return self.precpred(self._ctx, 2)

    def expr_infix3_sempred(self, localctx: Expr_infix3Context, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 3)

        if predIndex == 9:
            return self.precpred(self._ctx, 2)

    def expr_infix4_sempred(self, localctx: Expr_infix4Context, predIndex: int):
        if predIndex == 10:
            return self.precpred(self._ctx, 4)

        if predIndex == 11:
            return self.precpred(self._ctx, 3)

        if predIndex == 12:
            return self.precpred(self._ctx, 2)

    def expr_core_sempred(self, localctx: Expr_coreContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 10)

        if predIndex == 14:
            return self.precpred(self._ctx, 9)
